
dac_prj2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006588  08006588  00007588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006780  08006780  000081cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006780  08006780  00007780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006788  08006788  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006788  08006788  00007788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800678c  0800678c  0000778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08006790  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001cc  0800695c  000081cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  0800695c  00008584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1c5  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227b  00000000  00000000  000173c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00019640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b18  00000000  00000000  0001a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022419  00000000  00000000  0001af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109b8  00000000  00000000  0003d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2df8  00000000  00000000  0004dd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd4  00000000  00000000  00120b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00124b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001cc 	.word	0x200001cc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006570 	.word	0x08006570

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001d0 	.word	0x200001d0
 8000204:	08006570 	.word	0x08006570

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b988 	b.w	8000e6c <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	4688      	mov	r8, r1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d14a      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d962      	bls.n	8000c50 <__udivmoddi4+0xdc>
 8000b8a:	fab2 f682 	clz	r6, r2
 8000b8e:	b14e      	cbz	r6, 8000ba4 <__udivmoddi4+0x30>
 8000b90:	f1c6 0320 	rsb	r3, r6, #32
 8000b94:	fa01 f806 	lsl.w	r8, r1, r6
 8000b98:	fa20 f303 	lsr.w	r3, r0, r3
 8000b9c:	40b7      	lsls	r7, r6
 8000b9e:	ea43 0808 	orr.w	r8, r3, r8
 8000ba2:	40b4      	lsls	r4, r6
 8000ba4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba8:	fa1f fc87 	uxth.w	ip, r7
 8000bac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bb0:	0c23      	lsrs	r3, r4, #16
 8000bb2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bba:	fb01 f20c 	mul.w	r2, r1, ip
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0x62>
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc8:	f080 80ea 	bcs.w	8000da0 <__udivmoddi4+0x22c>
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	f240 80e7 	bls.w	8000da0 <__udivmoddi4+0x22c>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	443b      	add	r3, r7
 8000bd6:	1a9a      	subs	r2, r3, r2
 8000bd8:	b2a3      	uxth	r3, r4
 8000bda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bea:	459c      	cmp	ip, r3
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0x8e>
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf4:	f080 80d6 	bcs.w	8000da4 <__udivmoddi4+0x230>
 8000bf8:	459c      	cmp	ip, r3
 8000bfa:	f240 80d3 	bls.w	8000da4 <__udivmoddi4+0x230>
 8000bfe:	443b      	add	r3, r7
 8000c00:	3802      	subs	r0, #2
 8000c02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c06:	eba3 030c 	sub.w	r3, r3, ip
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa2>
 8000c0e:	40f3      	lsrs	r3, r6
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xb6>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb0>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x14c>
 8000c32:	4573      	cmp	r3, lr
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xc8>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 8105 	bhi.w	8000e46 <__udivmoddi4+0x2d2>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4690      	mov	r8, r2
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d0e5      	beq.n	8000c16 <__udivmoddi4+0xa2>
 8000c4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c4e:	e7e2      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	f000 8090 	beq.w	8000d76 <__udivmoddi4+0x202>
 8000c56:	fab2 f682 	clz	r6, r2
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	f040 80a4 	bne.w	8000da8 <__udivmoddi4+0x234>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	0c03      	lsrs	r3, r0, #16
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	b280      	uxth	r0, r0
 8000c6a:	b2bc      	uxth	r4, r7
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x11e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x11c>
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	f200 80e0 	bhi.w	8000e50 <__udivmoddi4+0x2dc>
 8000c90:	46c4      	mov	ip, r8
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ca0:	fb02 f404 	mul.w	r4, r2, r4
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x144>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x142>
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	f200 80ca 	bhi.w	8000e4a <__udivmoddi4+0x2d6>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	1b1b      	subs	r3, r3, r4
 8000cba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x98>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa0e f401 	lsl.w	r4, lr, r1
 8000cd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	fa00 f801 	lsl.w	r8, r0, r1
 8000ce2:	fa1f fc87 	uxth.w	ip, r7
 8000ce6:	fbbe f0f9 	udiv	r0, lr, r9
 8000cea:	0c1c      	lsrs	r4, r3, #16
 8000cec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x1a0>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d06:	f080 809c 	bcs.w	8000e42 <__udivmoddi4+0x2ce>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8099 	bls.w	8000e42 <__udivmoddi4+0x2ce>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	eba4 040e 	sub.w	r4, r4, lr
 8000d18:	fa1f fe83 	uxth.w	lr, r3
 8000d1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d20:	fb09 4413 	mls	r4, r9, r3, r4
 8000d24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x1ce>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d36:	f080 8082 	bcs.w	8000e3e <__udivmoddi4+0x2ca>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d97f      	bls.n	8000e3e <__udivmoddi4+0x2ca>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d46:	eba4 040c 	sub.w	r4, r4, ip
 8000d4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d4e:	4564      	cmp	r4, ip
 8000d50:	4673      	mov	r3, lr
 8000d52:	46e1      	mov	r9, ip
 8000d54:	d362      	bcc.n	8000e1c <__udivmoddi4+0x2a8>
 8000d56:	d05f      	beq.n	8000e18 <__udivmoddi4+0x2a4>
 8000d58:	b15d      	cbz	r5, 8000d72 <__udivmoddi4+0x1fe>
 8000d5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6a:	431e      	orrs	r6, r3
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d72:	2100      	movs	r1, #0
 8000d74:	e74f      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000d76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d7a:	0c01      	lsrs	r1, r0, #16
 8000d7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d80:	b280      	uxth	r0, r0
 8000d82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d86:	463b      	mov	r3, r7
 8000d88:	4638      	mov	r0, r7
 8000d8a:	463c      	mov	r4, r7
 8000d8c:	46b8      	mov	r8, r7
 8000d8e:	46be      	mov	lr, r7
 8000d90:	2620      	movs	r6, #32
 8000d92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d96:	eba2 0208 	sub.w	r2, r2, r8
 8000d9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d9e:	e766      	b.n	8000c6e <__udivmoddi4+0xfa>
 8000da0:	4601      	mov	r1, r0
 8000da2:	e718      	b.n	8000bd6 <__udivmoddi4+0x62>
 8000da4:	4610      	mov	r0, r2
 8000da6:	e72c      	b.n	8000c02 <__udivmoddi4+0x8e>
 8000da8:	f1c6 0220 	rsb	r2, r6, #32
 8000dac:	fa2e f302 	lsr.w	r3, lr, r2
 8000db0:	40b7      	lsls	r7, r6
 8000db2:	40b1      	lsls	r1, r6
 8000db4:	fa20 f202 	lsr.w	r2, r0, r2
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dc2:	b2bc      	uxth	r4, r7
 8000dc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb08 f904 	mul.w	r9, r8, r4
 8000dd2:	40b0      	lsls	r0, r6
 8000dd4:	4589      	cmp	r9, r1
 8000dd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	d93e      	bls.n	8000e5c <__udivmoddi4+0x2e8>
 8000dde:	1879      	adds	r1, r7, r1
 8000de0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000de4:	d201      	bcs.n	8000dea <__udivmoddi4+0x276>
 8000de6:	4589      	cmp	r9, r1
 8000de8:	d81f      	bhi.n	8000e2a <__udivmoddi4+0x2b6>
 8000dea:	eba1 0109 	sub.w	r1, r1, r9
 8000dee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df2:	fb09 f804 	mul.w	r8, r9, r4
 8000df6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dfa:	b292      	uxth	r2, r2
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	4542      	cmp	r2, r8
 8000e02:	d229      	bcs.n	8000e58 <__udivmoddi4+0x2e4>
 8000e04:	18ba      	adds	r2, r7, r2
 8000e06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e0a:	d2c4      	bcs.n	8000d96 <__udivmoddi4+0x222>
 8000e0c:	4542      	cmp	r2, r8
 8000e0e:	d2c2      	bcs.n	8000d96 <__udivmoddi4+0x222>
 8000e10:	f1a9 0102 	sub.w	r1, r9, #2
 8000e14:	443a      	add	r2, r7
 8000e16:	e7be      	b.n	8000d96 <__udivmoddi4+0x222>
 8000e18:	45f0      	cmp	r8, lr
 8000e1a:	d29d      	bcs.n	8000d58 <__udivmoddi4+0x1e4>
 8000e1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	46e1      	mov	r9, ip
 8000e28:	e796      	b.n	8000d58 <__udivmoddi4+0x1e4>
 8000e2a:	eba7 0909 	sub.w	r9, r7, r9
 8000e2e:	4449      	add	r1, r9
 8000e30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e38:	fb09 f804 	mul.w	r8, r9, r4
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x282>
 8000e3e:	4673      	mov	r3, lr
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1ce>
 8000e42:	4650      	mov	r0, sl
 8000e44:	e766      	b.n	8000d14 <__udivmoddi4+0x1a0>
 8000e46:	4608      	mov	r0, r1
 8000e48:	e6fd      	b.n	8000c46 <__udivmoddi4+0xd2>
 8000e4a:	443b      	add	r3, r7
 8000e4c:	3a02      	subs	r2, #2
 8000e4e:	e733      	b.n	8000cb8 <__udivmoddi4+0x144>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	e71c      	b.n	8000c92 <__udivmoddi4+0x11e>
 8000e58:	4649      	mov	r1, r9
 8000e5a:	e79c      	b.n	8000d96 <__udivmoddi4+0x222>
 8000e5c:	eba1 0109 	sub.w	r1, r1, r9
 8000e60:	46c4      	mov	ip, r8
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	e7c4      	b.n	8000df6 <__udivmoddi4+0x282>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <generarSin>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generarSin(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	for (int i=0;i<size;i++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e03a      	b.n	8000ef2 <generarSin+0x82>
		Ysine[i]=((sin(i*2*PI/size)+1)*(4096/2));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb13 	bl	80004ac <__aeabi_i2d>
 8000e86:	a324      	add	r3, pc, #144	@ (adr r3, 8000f18 <generarSin+0xa8>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fb78 	bl	8000580 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <generarSin+0x98>)
 8000e9e:	f7ff fc99 	bl	80007d4 <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	ec43 2b17 	vmov	d7, r2, r3
 8000eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8000eae:	eef0 0a67 	vmov.f32	s1, s15
 8000eb2:	f004 fb39 	bl	8005528 <sin>
 8000eb6:	ec51 0b10 	vmov	r0, r1, d0
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <generarSin+0x9c>)
 8000ec0:	f7ff f9a8 	bl	8000214 <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <generarSin+0xa0>)
 8000ed2:	f7ff fb55 	bl	8000580 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe11 	bl	8000b04 <__aeabi_d2uiz>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	490b      	ldr	r1, [pc, #44]	@ (8000f14 <generarSin+0xa4>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0;i<size;i++){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef6:	ddc1      	ble.n	8000e7c <generarSin+0xc>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	40600000 	.word	0x40600000
 8000f0c:	3ff00000 	.word	0x3ff00000
 8000f10:	40a00000 	.word	0x40a00000
 8000f14:	2000037c 	.word	0x2000037c
 8000f18:	4d12d84a 	.word	0x4d12d84a
 8000f1c:	400921fb 	.word	0x400921fb

08000f20 <calcularARR>:
int calcularARR(int freq){
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if (freq==0){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <calcularARR+0x12>
		return 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e008      	b.n	8000f44 <calcularARR+0x24>
	}
	int TF=size*freq;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]
	return ((TIM_FREQ/((PSC+1)*TF))-1);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <calcularARR+0x30>)
 8000f3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f42:	3b01      	subs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	0501bd00 	.word	0x0501bd00

08000f54 <playTone>:
		return 0;
	return ((TIM_FREQ/(ARR*freq))-1);
	}
}*/

void playTone(int *tone, int *duration,int *pause, int Nsize){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
	for(int i=0;i<Nsize;i++){
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e037      	b.n	8000fd8 <playTone+0x84>

		if (interrupt_game){
 8000f68:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <playTone+0x98>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <playTone+0x24>
			noTone();
 8000f72:	f000 f83f 	bl	8000ff4 <noTone>
			break;
 8000f76:	e034      	b.n	8000fe2 <playTone+0x8e>
		}

		int valorARR=calcularARR(tone[i]);//calcular valor del periodo
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffcc 	bl	8000f20 <calcularARR>
 8000f88:	61b8      	str	r0, [r7, #24]
		int dur=duration[i];
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	617b      	str	r3, [r7, #20]
		int pauseBT=(pause!=NULL)?(pause[i]-duration[i]):0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00b      	beq.n	8000fb4 <playTone+0x60>
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	440b      	add	r3, r1
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	e000      	b.n	8000fb6 <playTone+0x62>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]

		TIM6->ARR=valorARR;
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <playTone+0x9c>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
		HAL_Delay(dur);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fe15 	bl	8001bf0 <HAL_Delay>
		noTone();
 8000fc6:	f000 f815 	bl	8000ff4 <noTone>
		HAL_Delay(pauseBT);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fe0f 	bl	8001bf0 <HAL_Delay>
	for(int i=0;i<Nsize;i++){
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbc3      	blt.n	8000f68 <playTone+0x14>
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000057f 	.word	0x2000057f
 8000ff0:	40001000 	.word	0x40001000

08000ff4 <noTone>:

void noTone(void){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	TIM6->ARR=0;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <noTone+0x14>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40001000 	.word	0x40001000

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f000 fd7b 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f8a5 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 fa85 	bl	8001528 <MX_GPIO_Init>
  MX_DMA_Init();
 800101e:	f000 fa63 	bl	80014e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001022:	f000 fa0d 	bl	8001440 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001026:	f000 f90b 	bl	8001240 <MX_DAC_Init>
  MX_TIM1_Init();
 800102a:	f000 f933 	bl	8001294 <MX_TIM1_Init>
  MX_TIM6_Init();
 800102e:	f000 f9d1 	bl	80013d4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001032:	f000 fa2f 	bl	8001494 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  generarSin();
 8001036:	f7ff ff1b 	bl	8000e70 <generarSin>
  HAL_DAC_Init(&hdac);
 800103a:	4835      	ldr	r0, [pc, #212]	@ (8001110 <main+0x104>)
 800103c:	f000 ff0d 	bl	8001e5a <HAL_DAC_Init>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, Ysine, size, DAC_ALIGN_12B_R);
 8001040:	2300      	movs	r3, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <main+0x108>)
 8001048:	2100      	movs	r1, #0
 800104a:	4831      	ldr	r0, [pc, #196]	@ (8001110 <main+0x104>)
 800104c:	f000 ff28 	bl	8001ea0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8001050:	4831      	ldr	r0, [pc, #196]	@ (8001118 <main+0x10c>)
 8001052:	f002 fcb7 	bl	80039c4 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart3, uart_buffer,1);
 8001056:	2201      	movs	r2, #1
 8001058:	4930      	ldr	r1, [pc, #192]	@ (800111c <main+0x110>)
 800105a:	4831      	ldr	r0, [pc, #196]	@ (8001120 <main+0x114>)
 800105c:	f003 fb12 	bl	8004684 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  //playTone(game_melody,game_duration,NULL,(sizeof(game_melody)/sizeof(game_melody[0])));
  //noTone();
  while (1)
  {
	  if(interrupt_game){
 8001060:	4b30      	ldr	r3, [pc, #192]	@ (8001124 <main+0x118>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <main+0x68>
		  interrupt_game=0;
 800106a:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <main+0x118>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		  noTone();
 8001070:	f7ff ffc0 	bl	8000ff4 <noTone>
	  }

	  if(flag_p){
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <main+0x11c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d009      	beq.n	8001092 <main+0x86>
		  flag_p=0;
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <main+0x11c>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
		  playTone(gameover_melody,gameover_duration,NULL,sizeof(gameover_melody)/sizeof(gameover_melody[0]));
 8001084:	2309      	movs	r3, #9
 8001086:	2200      	movs	r2, #0
 8001088:	4928      	ldr	r1, [pc, #160]	@ (800112c <main+0x120>)
 800108a:	4829      	ldr	r0, [pc, #164]	@ (8001130 <main+0x124>)
 800108c:	f7ff ff62 	bl	8000f54 <playTone>
 8001090:	e7e6      	b.n	8001060 <main+0x54>
	  }else if (flag_c){
 8001092:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <main+0x128>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d009      	beq.n	80010b0 <main+0xa4>
		  flag_c=0;
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <main+0x128>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		  playTone(bite_melody,bite_duration,NULL,sizeof(bite_melody)/sizeof(bite_melody[0]));
 80010a2:	2304      	movs	r3, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	4924      	ldr	r1, [pc, #144]	@ (8001138 <main+0x12c>)
 80010a8:	4824      	ldr	r0, [pc, #144]	@ (800113c <main+0x130>)
 80010aa:	f7ff ff53 	bl	8000f54 <playTone>
 80010ae:	e7d7      	b.n	8001060 <main+0x54>
	  }else {
		  if(estado=='m'){
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <main+0x134>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b6d      	cmp	r3, #109	@ 0x6d
 80010b8:	d106      	bne.n	80010c8 <main+0xbc>
			  playTone(menu_melody,menu_duration,NULL,sizeof(menu_melody)/sizeof(menu_melody[0]));
 80010ba:	230c      	movs	r3, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	4921      	ldr	r1, [pc, #132]	@ (8001144 <main+0x138>)
 80010c0:	4821      	ldr	r0, [pc, #132]	@ (8001148 <main+0x13c>)
 80010c2:	f7ff ff47 	bl	8000f54 <playTone>
 80010c6:	e7cb      	b.n	8001060 <main+0x54>
		  }else if (estado=='j'){
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <main+0x134>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b6a      	cmp	r3, #106	@ 0x6a
 80010d0:	d106      	bne.n	80010e0 <main+0xd4>
			  playTone(game_melody,game_duration,NULL,sizeof(game_melody)/sizeof(game_melody[0]));
 80010d2:	230c      	movs	r3, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	491d      	ldr	r1, [pc, #116]	@ (800114c <main+0x140>)
 80010d8:	481d      	ldr	r0, [pc, #116]	@ (8001150 <main+0x144>)
 80010da:	f7ff ff3b 	bl	8000f54 <playTone>
 80010de:	e7bf      	b.n	8001060 <main+0x54>
		  }else if(estado=='w'){
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <main+0x134>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b77      	cmp	r3, #119	@ 0x77
 80010e8:	d106      	bne.n	80010f8 <main+0xec>
			  playTone(win_melody,win_duration,NULL,sizeof(win_melody)/sizeof(win_melody[0]));
 80010ea:	230c      	movs	r3, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	4919      	ldr	r1, [pc, #100]	@ (8001154 <main+0x148>)
 80010f0:	4819      	ldr	r0, [pc, #100]	@ (8001158 <main+0x14c>)
 80010f2:	f7ff ff2f 	bl	8000f54 <playTone>
 80010f6:	e7b3      	b.n	8001060 <main+0x54>
		  }else if(estado=='l'){
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <main+0x134>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b6c      	cmp	r3, #108	@ 0x6c
 8001100:	d1ae      	bne.n	8001060 <main+0x54>
			  playTone(lose_melody,lose_duration,NULL,sizeof(lose_melody)/sizeof(lose_melody[0]));
 8001102:	2307      	movs	r3, #7
 8001104:	2200      	movs	r2, #0
 8001106:	4915      	ldr	r1, [pc, #84]	@ (800115c <main+0x150>)
 8001108:	4815      	ldr	r0, [pc, #84]	@ (8001160 <main+0x154>)
 800110a:	f7ff ff23 	bl	8000f54 <playTone>
	  if(interrupt_game){
 800110e:	e7a7      	b.n	8001060 <main+0x54>
 8001110:	200001e8 	.word	0x200001e8
 8001114:	2000037c 	.word	0x2000037c
 8001118:	200002a4 	.word	0x200002a4
 800111c:	2000057c 	.word	0x2000057c
 8001120:	20000334 	.word	0x20000334
 8001124:	2000057f 	.word	0x2000057f
 8001128:	2000057d 	.word	0x2000057d
 800112c:	20000028 	.word	0x20000028
 8001130:	20000004 	.word	0x20000004
 8001134:	2000057e 	.word	0x2000057e
 8001138:	200000b8 	.word	0x200000b8
 800113c:	200000a8 	.word	0x200000a8
 8001140:	20000000 	.word	0x20000000
 8001144:	200000f8 	.word	0x200000f8
 8001148:	200000c8 	.word	0x200000c8
 800114c:	20000078 	.word	0x20000078
 8001150:	20000048 	.word	0x20000048
 8001154:	20000158 	.word	0x20000158
 8001158:	20000128 	.word	0x20000128
 800115c:	200001a4 	.word	0x200001a4
 8001160:	20000188 	.word	0x20000188

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	@ 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2234      	movs	r2, #52	@ 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f004 f9aa 	bl	80054cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <SystemClock_Config+0xd4>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	4a29      	ldr	r2, [pc, #164]	@ (8001238 <SystemClock_Config+0xd4>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	@ 0x40
 8001198:	4b27      	ldr	r3, [pc, #156]	@ (8001238 <SystemClock_Config+0xd4>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <SystemClock_Config+0xd8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011b0:	4a22      	ldr	r2, [pc, #136]	@ (800123c <SystemClock_Config+0xd8>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <SystemClock_Config+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d8:	2310      	movs	r3, #16
 80011da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 f8f8 	bl	80033e8 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011fe:	f000 fa47 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2302      	movs	r3, #2
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	2102      	movs	r1, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fd98 	bl	8002d54 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800122a:	f000 fa31 	bl	8001690 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3750      	adds	r7, #80	@ 0x50
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_DAC_Init+0x4c>)
 8001250:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <MX_DAC_Init+0x50>)
 8001252:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <MX_DAC_Init+0x4c>)
 8001256:	f000 fe00 	bl	8001e5a <HAL_DAC_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001260:	f000 fa16 	bl	8001690 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001264:	2304      	movs	r3, #4
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	@ (800128c <MX_DAC_Init+0x4c>)
 8001274:	f000 fef4 	bl	8002060 <HAL_DAC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800127e:	f000 fa07 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001e8 	.word	0x200001e8
 8001290:	40007400 	.word	0x40007400

08001294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b096      	sub	sp, #88	@ 0x58
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2220      	movs	r2, #32
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 f8fd 	bl	80054cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d2:	4b3e      	ldr	r3, [pc, #248]	@ (80013cc <MX_TIM1_Init+0x138>)
 80012d4:	4a3e      	ldr	r2, [pc, #248]	@ (80013d0 <MX_TIM1_Init+0x13c>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012d8:	4b3c      	ldr	r3, [pc, #240]	@ (80013cc <MX_TIM1_Init+0x138>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <MX_TIM1_Init+0x138>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80012e4:	4b39      	ldr	r3, [pc, #228]	@ (80013cc <MX_TIM1_Init+0x138>)
 80012e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <MX_TIM1_Init+0x138>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f2:	4b36      	ldr	r3, [pc, #216]	@ (80013cc <MX_TIM1_Init+0x138>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <MX_TIM1_Init+0x138>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012fe:	4833      	ldr	r0, [pc, #204]	@ (80013cc <MX_TIM1_Init+0x138>)
 8001300:	f002 fb10 	bl	8003924 <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800130a:	f000 f9c1 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001312:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001314:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001318:	4619      	mov	r1, r3
 800131a:	482c      	ldr	r0, [pc, #176]	@ (80013cc <MX_TIM1_Init+0x138>)
 800131c:	f002 fcd6 	bl	8003ccc <HAL_TIM_ConfigClockSource>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001326:	f000 f9b3 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800132a:	4828      	ldr	r0, [pc, #160]	@ (80013cc <MX_TIM1_Init+0x138>)
 800132c:	f002 fbb2 	bl	8003a94 <HAL_TIM_PWM_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001336:	f000 f9ab 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001342:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001346:	4619      	mov	r1, r3
 8001348:	4820      	ldr	r0, [pc, #128]	@ (80013cc <MX_TIM1_Init+0x138>)
 800134a:	f003 f87d 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001354:	f000 f99c 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001358:	2360      	movs	r3, #96	@ 0x60
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 800135c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001376:	220c      	movs	r2, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4814      	ldr	r0, [pc, #80]	@ (80013cc <MX_TIM1_Init+0x138>)
 800137c:	f002 fbe4 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001386:	f000 f983 	bl	8001690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800139e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	@ (80013cc <MX_TIM1_Init+0x138>)
 80013ae:	f003 f8c7 	bl	8004540 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013b8:	f000 f96a 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <MX_TIM1_Init+0x138>)
 80013be:	f000 fa45 	bl	800184c <HAL_TIM_MspPostInit>

}
 80013c2:	bf00      	nop
 80013c4:	3758      	adds	r7, #88	@ 0x58
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000025c 	.word	0x2000025c
 80013d0:	40010000 	.word	0x40010000

080013d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_TIM6_Init+0x64>)
 80013e4:	4a15      	ldr	r2, [pc, #84]	@ (800143c <MX_TIM6_Init+0x68>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <MX_TIM6_Init+0x64>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_TIM6_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <MX_TIM6_Init+0x64>)
 80013f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_TIM6_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001402:	480d      	ldr	r0, [pc, #52]	@ (8001438 <MX_TIM6_Init+0x64>)
 8001404:	f002 fa8e 	bl	8003924 <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800140e:	f000 f93f 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001412:	2320      	movs	r3, #32
 8001414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	@ (8001438 <MX_TIM6_Init+0x64>)
 8001420:	f003 f812 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800142a:	f000 f931 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200002a4 	.word	0x200002a4
 800143c:	40001000 	.word	0x40001000

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_USART2_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001478:	f003 f8b4 	bl	80045e4 <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 f905 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002ec 	.word	0x200002ec
 8001490:	40004400 	.word	0x40004400

08001494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <MX_USART3_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014cc:	f003 f88a 	bl	80045e4 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014d6:	f000 f8db 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000334 	.word	0x20000334
 80014e4:	40004800 	.word	0x40004800

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <MX_DMA_Init+0x3c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <MX_DMA_Init+0x3c>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_DMA_Init+0x3c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2010      	movs	r0, #16
 8001510:	f000 fc6d 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001514:	2010      	movs	r0, #16
 8001516:	f000 fc86 	bl	8001e26 <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <MX_GPIO_Init+0xac>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_GPIO_Init+0xac>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_GPIO_Init+0xac>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <MX_GPIO_Init+0xac>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_GPIO_Init+0xac>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_GPIO_Init+0xb0>)
 80015c6:	f001 fa31 	bl	8002a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020800 	.word	0x40020800

080015dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

	if(uart_buffer[0]=='p'){
 80015e4:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <HAL_UART_RxCpltCallback+0x9c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b70      	cmp	r3, #112	@ 0x70
 80015ea:	d106      	bne.n	80015fa <HAL_UART_RxCpltCallback+0x1e>
		flag_p=1;
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <HAL_UART_RxCpltCallback+0xa0>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
		interrupt_game=1;
 80015f2:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <HAL_UART_RxCpltCallback+0xa4>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e035      	b.n	8001666 <HAL_UART_RxCpltCallback+0x8a>
	}else if (uart_buffer[0]=='c'){
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <HAL_UART_RxCpltCallback+0x9c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b63      	cmp	r3, #99	@ 0x63
 8001600:	d106      	bne.n	8001610 <HAL_UART_RxCpltCallback+0x34>
		flag_c=1;
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <HAL_UART_RxCpltCallback+0xa8>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
		interrupt_game=1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_UART_RxCpltCallback+0xa4>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e02a      	b.n	8001666 <HAL_UART_RxCpltCallback+0x8a>
	}else if (uart_buffer[0]=='j'){
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_UART_RxCpltCallback+0x9c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b6a      	cmp	r3, #106	@ 0x6a
 8001616:	d106      	bne.n	8001626 <HAL_UART_RxCpltCallback+0x4a>
		estado='j';
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_UART_RxCpltCallback+0xac>)
 800161a:	226a      	movs	r2, #106	@ 0x6a
 800161c:	701a      	strb	r2, [r3, #0]
		interrupt_game=1;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_UART_RxCpltCallback+0xa4>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e01f      	b.n	8001666 <HAL_UART_RxCpltCallback+0x8a>
	}else if (uart_buffer[0]=='m'){
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_UART_RxCpltCallback+0x9c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b6d      	cmp	r3, #109	@ 0x6d
 800162c:	d106      	bne.n	800163c <HAL_UART_RxCpltCallback+0x60>
		estado='m';
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <HAL_UART_RxCpltCallback+0xac>)
 8001630:	226d      	movs	r2, #109	@ 0x6d
 8001632:	701a      	strb	r2, [r3, #0]
		interrupt_game=1;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_UART_RxCpltCallback+0xa4>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e014      	b.n	8001666 <HAL_UART_RxCpltCallback+0x8a>
	}else if (uart_buffer[0]=='w'){
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_UART_RxCpltCallback+0x9c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b77      	cmp	r3, #119	@ 0x77
 8001642:	d106      	bne.n	8001652 <HAL_UART_RxCpltCallback+0x76>
		estado='w';
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_UART_RxCpltCallback+0xac>)
 8001646:	2277      	movs	r2, #119	@ 0x77
 8001648:	701a      	strb	r2, [r3, #0]
		interrupt_game=1;
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_UART_RxCpltCallback+0xa4>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e009      	b.n	8001666 <HAL_UART_RxCpltCallback+0x8a>
	}else if (uart_buffer[0]=='l'){
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_UART_RxCpltCallback+0x9c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b6c      	cmp	r3, #108	@ 0x6c
 8001658:	d105      	bne.n	8001666 <HAL_UART_RxCpltCallback+0x8a>
		estado='l';
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_UART_RxCpltCallback+0xac>)
 800165c:	226c      	movs	r2, #108	@ 0x6c
 800165e:	701a      	strb	r2, [r3, #0]
		interrupt_game=1;
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_UART_RxCpltCallback+0xa4>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
	}

	 HAL_UART_Receive_IT(&huart3, uart_buffer,1);
 8001666:	2201      	movs	r2, #1
 8001668:	4903      	ldr	r1, [pc, #12]	@ (8001678 <HAL_UART_RxCpltCallback+0x9c>)
 800166a:	4808      	ldr	r0, [pc, #32]	@ (800168c <HAL_UART_RxCpltCallback+0xb0>)
 800166c:	f003 f80a 	bl	8004684 <HAL_UART_Receive_IT>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000057c 	.word	0x2000057c
 800167c:	2000057d 	.word	0x2000057d
 8001680:	2000057f 	.word	0x2000057f
 8001684:	2000057e 	.word	0x2000057e
 8001688:	20000000 	.word	0x20000000
 800168c:	20000334 	.word	0x20000334

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <Error_Handler+0x8>

0800169c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016da:	2007      	movs	r0, #7
 80016dc:	f000 fb7c 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2f      	ldr	r2, [pc, #188]	@ (80017c8 <HAL_DAC_MspInit+0xdc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d158      	bne.n	80017c0 <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_DAC_MspInit+0xe0>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a2d      	ldr	r2, [pc, #180]	@ (80017cc <HAL_DAC_MspInit+0xe0>)
 8001718:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <HAL_DAC_MspInit+0xe0>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <HAL_DAC_MspInit+0xe0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a26      	ldr	r2, [pc, #152]	@ (80017cc <HAL_DAC_MspInit+0xe0>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <HAL_DAC_MspInit+0xe0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001746:	2310      	movs	r3, #16
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174a:	2303      	movs	r3, #3
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	481d      	ldr	r0, [pc, #116]	@ (80017d0 <HAL_DAC_MspInit+0xe4>)
 800175a:	f001 f967 	bl	8002a2c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 8001760:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_DAC_MspInit+0xec>)
 8001762:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 8001766:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800176a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 800176e:	2240      	movs	r2, #64	@ 0x40
 8001770:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 800177a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 8001782:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001786:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 800178a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800178e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 8001792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001796:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001798:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80017a4:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 80017a6:	f000 fd3f 	bl	8002228 <HAL_DMA_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80017b0:	f7ff ff6e 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a07      	ldr	r2, [pc, #28]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <HAL_DAC_MspInit+0xe8>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40007400 	.word	0x40007400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	200001fc 	.word	0x200001fc
 80017d8:	40026088 	.word	0x40026088

080017dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a15      	ldr	r2, [pc, #84]	@ (8001840 <HAL_TIM_Base_MspInit+0x64>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10e      	bne.n	800180c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <HAL_TIM_Base_MspInit+0x68>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <HAL_TIM_Base_MspInit+0x68>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_TIM_Base_MspInit+0x68>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800180a:	e012      	b.n	8001832 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_TIM_Base_MspInit+0x6c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10d      	bne.n	8001832 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_TIM_Base_MspInit+0x68>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_TIM_Base_MspInit+0x68>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <HAL_TIM_Base_MspInit+0x68>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40010000 	.word	0x40010000
 8001844:	40023800 	.word	0x40023800
 8001848:	40001000 	.word	0x40001000

0800184c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <HAL_TIM_MspPostInit+0x68>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d11e      	bne.n	80018ac <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_TIM_MspPostInit+0x6c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	@ (80018b8 <HAL_TIM_MspPostInit+0x6c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_TIM_MspPostInit+0x6c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 800188a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800188e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800189c:	2301      	movs	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <HAL_TIM_MspPostInit+0x70>)
 80018a8:	f001 f8c0 	bl	8002a2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40010000 	.word	0x40010000
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	@ 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <HAL_UART_MspInit+0x134>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12c      	bne.n	800193c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b44      	ldr	r3, [pc, #272]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a43      	ldr	r2, [pc, #268]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a3c      	ldr	r2, [pc, #240]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b3a      	ldr	r3, [pc, #232]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800191a:	230c      	movs	r3, #12
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800192a:	2307      	movs	r3, #7
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4831      	ldr	r0, [pc, #196]	@ (80019fc <HAL_UART_MspInit+0x13c>)
 8001936:	f001 f879 	bl	8002a2c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800193a:	e057      	b.n	80019ec <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <HAL_UART_MspInit+0x140>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d152      	bne.n	80019ec <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a2a      	ldr	r2, [pc, #168]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_UART_MspInit+0x138>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART3RX_Pin;
 800199a:	2320      	movs	r3, #32
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019aa:	2307      	movs	r3, #7
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(UART3RX_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4813      	ldr	r0, [pc, #76]	@ (8001a04 <HAL_UART_MspInit+0x144>)
 80019b6:	f001 f839 	bl	8002a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019cc:	2307      	movs	r3, #7
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <HAL_UART_MspInit+0x148>)
 80019d8:	f001 f828 	bl	8002a2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	2027      	movs	r0, #39	@ 0x27
 80019e2:	f000 fa04 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019e6:	2027      	movs	r0, #39	@ 0x27
 80019e8:	f000 fa1d 	bl	8001e26 <HAL_NVIC_EnableIRQ>
}
 80019ec:	bf00      	nop
 80019ee:	3730      	adds	r7, #48	@ 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40004400 	.word	0x40004400
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40004800 	.word	0x40004800
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020400 	.word	0x40020400

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a62:	f000 f8a5 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <DMA1_Stream5_IRQHandler+0x10>)
 8001a72:	f000 fd71 	bl	8002558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200001fc 	.word	0x200001fc

08001a80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <USART3_IRQHandler+0x10>)
 8001a86:	f002 fe23 	bl	80046d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000334 	.word	0x20000334

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001abc:	f7ff ffea 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	@ (8001af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f003 fcf9 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aea:	f7ff fa8f 	bl	800100c <main>
  bx  lr    
 8001aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001afc:	08006790 	.word	0x08006790
  ldr r2, =_sbss
 8001b00:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001b04:	20000584 	.word	0x20000584

08001b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <HAL_Init+0x40>)
 8001b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <HAL_Init+0x40>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	@ (8001b4c <HAL_Init+0x40>)
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f94f 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fdac 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f967 	bl	8001e42 <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f92f 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	@ (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200001c0 	.word	0x200001c0
 8001ba8:	200001c8 	.word	0x200001c8
 8001bac:	200001c4 	.word	0x200001c4

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	200001c8 	.word	0x200001c8
 8001bd4:	20000580 	.word	0x20000580

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000580 	.word	0x20000580

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001c8 	.word	0x200001c8

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	@ (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff29 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff3e 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff8e 	bl	8001d2c <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5d 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff31 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e014      	b.n	8001e96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	791b      	ldrb	r3, [r3, #4]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff fc35 	bl	80016ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0a2      	b.n	8002002 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	795b      	ldrb	r3, [r3, #5]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DAC_Start_DMA+0x28>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e09c      	b.n	8002002 <HAL_DAC_Start_DMA+0x162>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d129      	bne.n	8001f2e <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4a4b      	ldr	r2, [pc, #300]	@ (800200c <HAL_DAC_Start_DMA+0x16c>)
 8001ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8002010 <HAL_DAC_Start_DMA+0x170>)
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <HAL_DAC_Start_DMA+0x174>)
 8001ef0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f00:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_DAC_Start_DMA+0x70>
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d005      	beq.n	8001f1a <HAL_DAC_Start_DMA+0x7a>
 8001f0e:	e009      	b.n	8001f24 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3308      	adds	r3, #8
 8001f16:	613b      	str	r3, [r7, #16]
        break;
 8001f18:	e033      	b.n	8001f82 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	330c      	adds	r3, #12
 8001f20:	613b      	str	r3, [r7, #16]
        break;
 8001f22:	e02e      	b.n	8001f82 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3310      	adds	r3, #16
 8001f2a:	613b      	str	r3, [r7, #16]
        break;
 8001f2c:	e029      	b.n	8001f82 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a39      	ldr	r2, [pc, #228]	@ (8002018 <HAL_DAC_Start_DMA+0x178>)
 8001f34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4a38      	ldr	r2, [pc, #224]	@ (800201c <HAL_DAC_Start_DMA+0x17c>)
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a37      	ldr	r2, [pc, #220]	@ (8002020 <HAL_DAC_Start_DMA+0x180>)
 8001f44:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f54:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DAC_Start_DMA+0xc4>
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d005      	beq.n	8001f6e <HAL_DAC_Start_DMA+0xce>
 8001f62:	e009      	b.n	8001f78 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3314      	adds	r3, #20
 8001f6a:	613b      	str	r3, [r7, #16]
        break;
 8001f6c:	e009      	b.n	8001f82 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3318      	adds	r3, #24
 8001f74:	613b      	str	r3, [r7, #16]
        break;
 8001f76:	e004      	b.n	8001f82 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	331c      	adds	r3, #28
 8001f7e:	613b      	str	r3, [r7, #16]
        break;
 8001f80:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d111      	bne.n	8001fac <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6898      	ldr	r0, [r3, #8]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	f000 f9ef 	bl	8002384 <HAL_DMA_Start_IT>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	75fb      	strb	r3, [r7, #23]
 8001faa:	e010      	b.n	8001fce <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001fba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68d8      	ldr	r0, [r3, #12]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	f000 f9dd 	bl	8002384 <HAL_DMA_Start_IT>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e005      	b.n	8002000 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f043 0204 	orr.w	r2, r3, #4
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002000:	7dfb      	ldrb	r3, [r7, #23]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	08002113 	.word	0x08002113
 8002010:	08002135 	.word	0x08002135
 8002014:	08002151 	.word	0x08002151
 8002018:	080021bb 	.word	0x080021bb
 800201c:	080021dd 	.word	0x080021dd
 8002020:	080021f9 	.word	0x080021f9

08002024 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	@ 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_DAC_ConfigChannel+0x1c>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e042      	b.n	8002106 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	795b      	ldrb	r3, [r3, #5]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_DAC_ConfigChannel+0x2c>
 8002088:	2302      	movs	r3, #2
 800208a:	e03c      	b.n	8002106 <HAL_DAC_ConfigChannel+0xa6>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2202      	movs	r2, #2
 8002096:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6819      	ldr	r1, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	22c0      	movs	r2, #192	@ 0xc0
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002104:	7ffb      	ldrb	r3, [r7, #31]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff ff7f 	bl	8002024 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	711a      	strb	r2, [r3, #4]
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002140:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ff78 	bl	8002038 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ff6e 	bl	800204c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	711a      	strb	r2, [r3, #4]
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff ffd8 	bl	800217e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	711a      	strb	r2, [r3, #4]
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff ffd1 	bl	8002192 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002204:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f043 0204 	orr.w	r2, r3, #4
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff ffc7 	bl	80021a6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	711a      	strb	r2, [r3, #4]
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fcd0 	bl	8001bd8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff fcb7 	bl	8001bd8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	@ (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fb01 	bl	8002934 <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	@ 0x40
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fab8 	bl	80028c8 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	223f      	movs	r2, #63	@ 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x26>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e040      	b.n	800242c <HAL_DMA_Start_IT+0xa8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12f      	bne.n	800241e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa4a 	bl	800286c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	223f      	movs	r2, #63	@ 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0216 	orr.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e005      	b.n	800242a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002442:	f7ff fbc9 	bl	8001bd8 <HAL_GetTick>
 8002446:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d008      	beq.n	8002466 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2280      	movs	r2, #128	@ 0x80
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e052      	b.n	800250c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002484:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_Abort+0x62>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0201 	bic.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b6:	e013      	b.n	80024e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b8:	f7ff fb8e 	bl	8001bd8 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d90c      	bls.n	80024e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e015      	b.n	800250c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e4      	bne.n	80024b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	223f      	movs	r2, #63	@ 0x3f
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d004      	beq.n	8002532 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2280      	movs	r2, #128	@ 0x80
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00c      	b.n	800254c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2205      	movs	r2, #5
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002564:	4b8e      	ldr	r3, [pc, #568]	@ (80027a0 <HAL_DMA_IRQHandler+0x248>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a8e      	ldr	r2, [pc, #568]	@ (80027a4 <HAL_DMA_IRQHandler+0x24c>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0a9b      	lsrs	r3, r3, #10
 8002570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002582:	2208      	movs	r2, #8
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01a      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0204 	bic.w	r2, r2, #4
 80025aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b0:	2208      	movs	r2, #8
 80025b2:	409a      	lsls	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	2201      	movs	r2, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d012      	beq.n	80025fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	2201      	movs	r2, #1
 80025e8:	409a      	lsls	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f2:	f043 0202 	orr.w	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	2204      	movs	r2, #4
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	2204      	movs	r2, #4
 800261e:	409a      	lsls	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f043 0204 	orr.w	r2, r3, #4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2210      	movs	r2, #16
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d043      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03c      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	2210      	movs	r2, #16
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d024      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
 8002686:	e01f      	b.n	80026c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e016      	b.n	80026c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0208 	bic.w	r2, r2, #8
 80026b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2220      	movs	r2, #32
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 808f 	beq.w	80027f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8087 	beq.w	80027f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ee:	2220      	movs	r2, #32
 80026f0:	409a      	lsls	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d136      	bne.n	8002770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0216 	bic.w	r2, r2, #22
 8002710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_DMA_IRQHandler+0x1da>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0208 	bic.w	r2, r2, #8
 8002740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	223f      	movs	r2, #63	@ 0x3f
 8002748:	409a      	lsls	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002762:	2b00      	cmp	r3, #0
 8002764:	d07e      	beq.n	8002864 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
        }
        return;
 800276e:	e079      	b.n	8002864 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01d      	beq.n	80027ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10d      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	2b00      	cmp	r3, #0
 8002792:	d031      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
 800279c:	e02c      	b.n	80027f8 <HAL_DMA_IRQHandler+0x2a0>
 800279e:	bf00      	nop
 80027a0:	200001c0 	.word	0x200001c0
 80027a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d023      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
 80027b8:	e01e      	b.n	80027f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10f      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0210 	bic.w	r2, r2, #16
 80027d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d032      	beq.n	8002866 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d022      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2205      	movs	r2, #5
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	3301      	adds	r3, #1
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	429a      	cmp	r2, r3
 800282e:	d307      	bcc.n	8002840 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f2      	bne.n	8002824 <HAL_DMA_IRQHandler+0x2cc>
 800283e:	e000      	b.n	8002842 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002840:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
 8002862:	e000      	b.n	8002866 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002864:	bf00      	nop
    }
  }
}
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002888:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b40      	cmp	r3, #64	@ 0x40
 8002898:	d108      	bne.n	80028ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028aa:	e007      	b.n	80028bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3b10      	subs	r3, #16
 80028d8:	4a14      	ldr	r2, [pc, #80]	@ (800292c <DMA_CalcBaseAndBitshift+0x64>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028e2:	4a13      	ldr	r2, [pc, #76]	@ (8002930 <DMA_CalcBaseAndBitshift+0x68>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d909      	bls.n	800290a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	1d1a      	adds	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	659a      	str	r2, [r3, #88]	@ 0x58
 8002908:	e007      	b.n	800291a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	aaaaaaab 	.word	0xaaaaaaab
 8002930:	080065a0 	.word	0x080065a0

08002934 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d11f      	bne.n	800298e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d856      	bhi.n	8002a02 <DMA_CheckFifoParam+0xce>
 8002954:	a201      	add	r2, pc, #4	@ (adr r2, 800295c <DMA_CheckFifoParam+0x28>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	0800296d 	.word	0x0800296d
 8002960:	0800297f 	.word	0x0800297f
 8002964:	0800296d 	.word	0x0800296d
 8002968:	08002a03 	.word	0x08002a03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002970:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d046      	beq.n	8002a06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297c:	e043      	b.n	8002a06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002986:	d140      	bne.n	8002a0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298c:	e03d      	b.n	8002a0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002996:	d121      	bne.n	80029dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d837      	bhi.n	8002a0e <DMA_CheckFifoParam+0xda>
 800299e:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <DMA_CheckFifoParam+0x70>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029bb 	.word	0x080029bb
 80029ac:	080029b5 	.word	0x080029b5
 80029b0:	080029cd 	.word	0x080029cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e030      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d025      	beq.n	8002a12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ca:	e022      	b.n	8002a12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029d4:	d11f      	bne.n	8002a16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029da:	e01c      	b.n	8002a16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d903      	bls.n	80029ea <DMA_CheckFifoParam+0xb6>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d003      	beq.n	80029f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029e8:	e018      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      break;
 80029ee:	e015      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002a00:	e00b      	b.n	8002a1a <DMA_CheckFifoParam+0xe6>
      break;
 8002a02:	bf00      	nop
 8002a04:	e00a      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      break;
 8002a06:	bf00      	nop
 8002a08:	e008      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e006      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e004      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e002      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	@ 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e165      	b.n	8002d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f040 8154 	bne.w	8002d0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d005      	beq.n	8002a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d130      	bne.n	8002ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	2203      	movs	r2, #3
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 0201 	and.w	r2, r3, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d017      	beq.n	8002b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d123      	bne.n	8002b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	220f      	movs	r2, #15
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	69b9      	ldr	r1, [r7, #24]
 8002b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0203 	and.w	r2, r3, #3
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80ae 	beq.w	8002d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d2c <HAL_GPIO_Init+0x300>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	4a5c      	ldr	r2, [pc, #368]	@ (8002d2c <HAL_GPIO_Init+0x300>)
 8002bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d2c <HAL_GPIO_Init+0x300>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bce:	4a58      	ldr	r2, [pc, #352]	@ (8002d30 <HAL_GPIO_Init+0x304>)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d34 <HAL_GPIO_Init+0x308>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d025      	beq.n	8002c46 <HAL_GPIO_Init+0x21a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8002d38 <HAL_GPIO_Init+0x30c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01f      	beq.n	8002c42 <HAL_GPIO_Init+0x216>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4d      	ldr	r2, [pc, #308]	@ (8002d3c <HAL_GPIO_Init+0x310>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d019      	beq.n	8002c3e <HAL_GPIO_Init+0x212>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d40 <HAL_GPIO_Init+0x314>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	@ (8002d44 <HAL_GPIO_Init+0x318>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00d      	beq.n	8002c36 <HAL_GPIO_Init+0x20a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d48 <HAL_GPIO_Init+0x31c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x206>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a49      	ldr	r2, [pc, #292]	@ (8002d4c <HAL_GPIO_Init+0x320>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_GPIO_Init+0x202>
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	e00c      	b.n	8002c48 <HAL_GPIO_Init+0x21c>
 8002c2e:	2307      	movs	r3, #7
 8002c30:	e00a      	b.n	8002c48 <HAL_GPIO_Init+0x21c>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x21c>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x21c>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x21c>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x21c>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x21c>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	@ (8002d30 <HAL_GPIO_Init+0x304>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b3a      	ldr	r3, [pc, #232]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8a:	4a31      	ldr	r2, [pc, #196]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c90:	4b2f      	ldr	r3, [pc, #188]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb4:	4a26      	ldr	r2, [pc, #152]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cba:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cde:	4a1c      	ldr	r2, [pc, #112]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d08:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <HAL_GPIO_Init+0x324>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f ae96 	bls.w	8002a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	@ 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0cc      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d68:	4b68      	ldr	r3, [pc, #416]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d90c      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b65      	ldr	r3, [pc, #404]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b63      	ldr	r3, [pc, #396]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0b8      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da8:	4b59      	ldr	r3, [pc, #356]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a58      	ldr	r2, [pc, #352]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc0:	4b53      	ldr	r3, [pc, #332]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a52      	ldr	r2, [pc, #328]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dcc:	4b50      	ldr	r3, [pc, #320]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	494d      	ldr	r1, [pc, #308]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d044      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b47      	ldr	r3, [pc, #284]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d119      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e12:	4b3f      	ldr	r3, [pc, #252]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e067      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b37      	ldr	r3, [pc, #220]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4934      	ldr	r1, [pc, #208]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e44:	f7fe fec8 	bl	8001bd8 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe fec4 	bl	8001bd8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e04f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b25      	ldr	r3, [pc, #148]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d20c      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b22      	ldr	r3, [pc, #136]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e032      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4916      	ldr	r1, [pc, #88]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec6:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	490e      	ldr	r1, [pc, #56]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eda:	f000 f855 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	490a      	ldr	r1, [pc, #40]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	5ccb      	ldrb	r3, [r1, r3]
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	4a09      	ldr	r2, [pc, #36]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fe28 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023c00 	.word	0x40023c00
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08006588 	.word	0x08006588
 8002f18:	200001c0 	.word	0x200001c0
 8002f1c:	200001c4 	.word	0x200001c4

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	200001c0 	.word	0x200001c0

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a9b      	lsrs	r3, r3, #10
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	08006598 	.word	0x08006598

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f64:	f7ff ffdc 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0b5b      	lsrs	r3, r3, #13
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	@ (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08006598 	.word	0x08006598

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b0ae      	sub	sp, #184	@ 0xb8
 8002f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fae:	4bcb      	ldr	r3, [pc, #812]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	f200 8206 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x440>
 8002fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002ff9 	.word	0x08002ff9
 8002fc8:	080033c9 	.word	0x080033c9
 8002fcc:	080033c9 	.word	0x080033c9
 8002fd0:	080033c9 	.word	0x080033c9
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	080033c9 	.word	0x080033c9
 8002fdc:	080033c9 	.word	0x080033c9
 8002fe0:	080033c9 	.word	0x080033c9
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	080033c9 	.word	0x080033c9
 8002fec:	080033c9 	.word	0x080033c9
 8002ff0:	080033c9 	.word	0x080033c9
 8002ff4:	080031f9 	.word	0x080031f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4bb9      	ldr	r3, [pc, #740]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ffe:	e1e7      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003000:	4bb8      	ldr	r3, [pc, #736]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003006:	e1e3      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003008:	4bb4      	ldr	r3, [pc, #720]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003014:	4bb1      	ldr	r3, [pc, #708]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d071      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003020:	4bae      	ldr	r3, [pc, #696]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800302c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003046:	4622      	mov	r2, r4
 8003048:	462b      	mov	r3, r5
 800304a:	f04f 0000 	mov.w	r0, #0
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	0159      	lsls	r1, r3, #5
 8003054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003058:	0150      	lsls	r0, r2, #5
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4621      	mov	r1, r4
 8003060:	1a51      	subs	r1, r2, r1
 8003062:	6439      	str	r1, [r7, #64]	@ 0x40
 8003064:	4629      	mov	r1, r5
 8003066:	eb63 0301 	sbc.w	r3, r3, r1
 800306a:	647b      	str	r3, [r7, #68]	@ 0x44
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003078:	4649      	mov	r1, r9
 800307a:	018b      	lsls	r3, r1, #6
 800307c:	4641      	mov	r1, r8
 800307e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003082:	4641      	mov	r1, r8
 8003084:	018a      	lsls	r2, r1, #6
 8003086:	4641      	mov	r1, r8
 8003088:	1a51      	subs	r1, r2, r1
 800308a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800308c:	4649      	mov	r1, r9
 800308e:	eb63 0301 	sbc.w	r3, r3, r1
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80030a0:	4649      	mov	r1, r9
 80030a2:	00cb      	lsls	r3, r1, #3
 80030a4:	4641      	mov	r1, r8
 80030a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030aa:	4641      	mov	r1, r8
 80030ac:	00ca      	lsls	r2, r1, #3
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	4622      	mov	r2, r4
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ba:	462b      	mov	r3, r5
 80030bc:	460a      	mov	r2, r1
 80030be:	eb42 0303 	adc.w	r3, r2, r3
 80030c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030d0:	4629      	mov	r1, r5
 80030d2:	024b      	lsls	r3, r1, #9
 80030d4:	4621      	mov	r1, r4
 80030d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030da:	4621      	mov	r1, r4
 80030dc:	024a      	lsls	r2, r1, #9
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80030f4:	f7fd fd26 	bl	8000b44 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003102:	e067      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003104:	4b75      	ldr	r3, [pc, #468]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	2200      	movs	r2, #0
 800310c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003110:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003114:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800311e:	2300      	movs	r3, #0
 8003120:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003122:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	f04f 0000 	mov.w	r0, #0
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	0159      	lsls	r1, r3, #5
 8003134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003138:	0150      	lsls	r0, r2, #5
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4621      	mov	r1, r4
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003144:	4629      	mov	r1, r5
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003158:	4649      	mov	r1, r9
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	4641      	mov	r1, r8
 800315e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003162:	4641      	mov	r1, r8
 8003164:	018a      	lsls	r2, r1, #6
 8003166:	4641      	mov	r1, r8
 8003168:	ebb2 0a01 	subs.w	sl, r2, r1
 800316c:	4649      	mov	r1, r9
 800316e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800317e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003182:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003186:	4692      	mov	sl, r2
 8003188:	469b      	mov	fp, r3
 800318a:	4623      	mov	r3, r4
 800318c:	eb1a 0303 	adds.w	r3, sl, r3
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	462b      	mov	r3, r5
 8003194:	eb4b 0303 	adc.w	r3, fp, r3
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031a6:	4629      	mov	r1, r5
 80031a8:	028b      	lsls	r3, r1, #10
 80031aa:	4621      	mov	r1, r4
 80031ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031b0:	4621      	mov	r1, r4
 80031b2:	028a      	lsls	r2, r1, #10
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031bc:	2200      	movs	r2, #0
 80031be:	673b      	str	r3, [r7, #112]	@ 0x70
 80031c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80031c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80031c6:	f7fd fcbd 	bl	8000b44 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4613      	mov	r3, r2
 80031d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031d4:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	3301      	adds	r3, #1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80031e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031f6:	e0eb      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f8:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003204:	4b35      	ldr	r3, [pc, #212]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d06b      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003210:	4b32      	ldr	r3, [pc, #200]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	2200      	movs	r2, #0
 8003218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800321a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800321c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	663b      	str	r3, [r7, #96]	@ 0x60
 8003224:	2300      	movs	r3, #0
 8003226:	667b      	str	r3, [r7, #100]	@ 0x64
 8003228:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800322c:	4622      	mov	r2, r4
 800322e:	462b      	mov	r3, r5
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	0159      	lsls	r1, r3, #5
 800323a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323e:	0150      	lsls	r0, r2, #5
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4621      	mov	r1, r4
 8003246:	1a51      	subs	r1, r2, r1
 8003248:	61b9      	str	r1, [r7, #24]
 800324a:	4629      	mov	r1, r5
 800324c:	eb63 0301 	sbc.w	r3, r3, r1
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800325e:	4659      	mov	r1, fp
 8003260:	018b      	lsls	r3, r1, #6
 8003262:	4651      	mov	r1, sl
 8003264:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003268:	4651      	mov	r1, sl
 800326a:	018a      	lsls	r2, r1, #6
 800326c:	4651      	mov	r1, sl
 800326e:	ebb2 0801 	subs.w	r8, r2, r1
 8003272:	4659      	mov	r1, fp
 8003274:	eb63 0901 	sbc.w	r9, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003284:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003288:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800328c:	4690      	mov	r8, r2
 800328e:	4699      	mov	r9, r3
 8003290:	4623      	mov	r3, r4
 8003292:	eb18 0303 	adds.w	r3, r8, r3
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	462b      	mov	r3, r5
 800329a:	eb49 0303 	adc.w	r3, r9, r3
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80032ac:	4629      	mov	r1, r5
 80032ae:	024b      	lsls	r3, r1, #9
 80032b0:	4621      	mov	r1, r4
 80032b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b6:	4621      	mov	r1, r4
 80032b8:	024a      	lsls	r2, r1, #9
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032c2:	2200      	movs	r2, #0
 80032c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032cc:	f7fd fc3a 	bl	8000b44 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4613      	mov	r3, r2
 80032d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032da:	e065      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x420>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	00f42400 	.word	0x00f42400
 80032e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e8:	4b3d      	ldr	r3, [pc, #244]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	2200      	movs	r2, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	4611      	mov	r1, r2
 80032f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80032fa:	2300      	movs	r3, #0
 80032fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80032fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003302:	4642      	mov	r2, r8
 8003304:	464b      	mov	r3, r9
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003314:	0150      	lsls	r0, r2, #5
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4641      	mov	r1, r8
 800331c:	1a51      	subs	r1, r2, r1
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	4649      	mov	r1, r9
 8003322:	eb63 0301 	sbc.w	r3, r3, r1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003334:	4659      	mov	r1, fp
 8003336:	018b      	lsls	r3, r1, #6
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800333e:	4651      	mov	r1, sl
 8003340:	018a      	lsls	r2, r1, #6
 8003342:	4651      	mov	r1, sl
 8003344:	1a54      	subs	r4, r2, r1
 8003346:	4659      	mov	r1, fp
 8003348:	eb63 0501 	sbc.w	r5, r3, r1
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	00eb      	lsls	r3, r5, #3
 8003356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335a:	00e2      	lsls	r2, r4, #3
 800335c:	4614      	mov	r4, r2
 800335e:	461d      	mov	r5, r3
 8003360:	4643      	mov	r3, r8
 8003362:	18e3      	adds	r3, r4, r3
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	464b      	mov	r3, r9
 8003368:	eb45 0303 	adc.w	r3, r5, r3
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800337a:	4629      	mov	r1, r5
 800337c:	028b      	lsls	r3, r1, #10
 800337e:	4621      	mov	r1, r4
 8003380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003384:	4621      	mov	r1, r4
 8003386:	028a      	lsls	r2, r1, #10
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003390:	2200      	movs	r2, #0
 8003392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003394:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003396:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800339a:	f7fd fbd3 	bl	8000b44 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4613      	mov	r3, r2
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033a8:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	0f1b      	lsrs	r3, r3, #28
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80033b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033c6:	e003      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80033ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	37b8      	adds	r7, #184	@ 0xb8
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400

080033e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e28d      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8083 	beq.w	800350e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003408:	4b94      	ldr	r3, [pc, #592]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b04      	cmp	r3, #4
 8003412:	d019      	beq.n	8003448 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003414:	4b91      	ldr	r3, [pc, #580]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
        || \
 800341c:	2b08      	cmp	r3, #8
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003420:	4b8e      	ldr	r3, [pc, #568]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800342c:	d00c      	beq.n	8003448 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b8b      	ldr	r3, [pc, #556]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d112      	bne.n	8003460 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b88      	ldr	r3, [pc, #544]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003446:	d10b      	bne.n	8003460 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	4b84      	ldr	r3, [pc, #528]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05b      	beq.n	800350c <HAL_RCC_OscConfig+0x124>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d157      	bne.n	800350c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e25a      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003468:	d106      	bne.n	8003478 <HAL_RCC_OscConfig+0x90>
 800346a:	4b7c      	ldr	r3, [pc, #496]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7b      	ldr	r2, [pc, #492]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e01d      	b.n	80034b4 <HAL_RCC_OscConfig+0xcc>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0xb4>
 8003482:	4b76      	ldr	r3, [pc, #472]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a75      	ldr	r2, [pc, #468]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b73      	ldr	r3, [pc, #460]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a72      	ldr	r2, [pc, #456]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0xcc>
 800349c:	4b6f      	ldr	r3, [pc, #444]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6e      	ldr	r2, [pc, #440]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b6c      	ldr	r3, [pc, #432]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6b      	ldr	r2, [pc, #428]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fb8c 	bl	8001bd8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe fb88 	bl	8001bd8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	@ 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e21f      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b61      	ldr	r3, [pc, #388]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0xdc>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fb78 	bl	8001bd8 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fb74 	bl	8001bd8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	@ 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e20b      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	4b57      	ldr	r3, [pc, #348]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x104>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d06f      	beq.n	80035fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800351a:	4b50      	ldr	r3, [pc, #320]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	d017      	beq.n	8003556 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003526:	4b4d      	ldr	r3, [pc, #308]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
        || \
 800352e:	2b08      	cmp	r3, #8
 8003530:	d105      	bne.n	800353e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003532:	4b4a      	ldr	r3, [pc, #296]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b47      	ldr	r3, [pc, #284]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d11c      	bne.n	8003584 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b44      	ldr	r3, [pc, #272]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	4b41      	ldr	r3, [pc, #260]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x186>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e1d3      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4937      	ldr	r1, [pc, #220]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	e03a      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358c:	4b34      	ldr	r3, [pc, #208]	@ (8003660 <HAL_RCC_OscConfig+0x278>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fe fb21 	bl	8001bd8 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359a:	f7fe fb1d 	bl	8001bd8 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1b4      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4925      	ldr	r1, [pc, #148]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_OscConfig+0x278>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fb00 	bl	8001bd8 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fe fafc 	bl	8001bd8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e193      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	4b1b      	ldr	r3, [pc, #108]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d036      	beq.n	8003674 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003610:	2201      	movs	r2, #1
 8003612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe fae0 	bl	8001bd8 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe fadc 	bl	8001bd8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e173      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <HAL_RCC_OscConfig+0x274>)
 8003630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x234>
 800363a:	e01b      	b.n	8003674 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fe fac9 	bl	8001bd8 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	e00e      	b.n	8003668 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364a:	f7fe fac5 	bl	8001bd8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d907      	bls.n	8003668 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e15c      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
 800365c:	40023800 	.word	0x40023800
 8003660:	42470000 	.word	0x42470000
 8003664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b8a      	ldr	r3, [pc, #552]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ea      	bne.n	800364a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8097 	beq.w	80037b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b83      	ldr	r3, [pc, #524]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b7f      	ldr	r3, [pc, #508]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	4a7e      	ldr	r2, [pc, #504]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b79      	ldr	r3, [pc, #484]	@ (8003898 <HAL_RCC_OscConfig+0x4b0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d118      	bne.n	80036f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036be:	4b76      	ldr	r3, [pc, #472]	@ (8003898 <HAL_RCC_OscConfig+0x4b0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a75      	ldr	r2, [pc, #468]	@ (8003898 <HAL_RCC_OscConfig+0x4b0>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fa85 	bl	8001bd8 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d2:	f7fe fa81 	bl	8001bd8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e118      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003898 <HAL_RCC_OscConfig+0x4b0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x31e>
 80036f8:	4b66      	ldr	r3, [pc, #408]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fc:	4a65      	ldr	r2, [pc, #404]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6713      	str	r3, [r2, #112]	@ 0x70
 8003704:	e01c      	b.n	8003740 <HAL_RCC_OscConfig+0x358>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b05      	cmp	r3, #5
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x340>
 800370e:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a60      	ldr	r2, [pc, #384]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70
 800371a:	4b5e      	ldr	r3, [pc, #376]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	4a5d      	ldr	r2, [pc, #372]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	@ 0x70
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0x358>
 8003728:	4b5a      	ldr	r3, [pc, #360]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	4a59      	ldr	r2, [pc, #356]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6713      	str	r3, [r2, #112]	@ 0x70
 8003734:	4b57      	ldr	r3, [pc, #348]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	4a56      	ldr	r2, [pc, #344]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	f023 0304 	bic.w	r3, r3, #4
 800373e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d015      	beq.n	8003774 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe fa46 	bl	8001bd8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fe fa42 	bl	8001bd8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0d7      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	4b4b      	ldr	r3, [pc, #300]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ee      	beq.n	8003750 <HAL_RCC_OscConfig+0x368>
 8003772:	e014      	b.n	800379e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe fa30 	bl	8001bd8 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe fa2c 	bl	8001bd8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0c1      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003792:	4b40      	ldr	r3, [pc, #256]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ee      	bne.n	800377c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80ad 	beq.w	8003914 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ba:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d060      	beq.n	8003888 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d145      	bne.n	800385a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b33      	ldr	r3, [pc, #204]	@ (800389c <HAL_RCC_OscConfig+0x4b4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fa00 	bl	8001bd8 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe f9fc 	bl	8001bd8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e093      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	3b01      	subs	r3, #1
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	071b      	lsls	r3, r3, #28
 8003826:	491b      	ldr	r1, [pc, #108]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <HAL_RCC_OscConfig+0x4b4>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe f9d1 	bl	8001bd8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe f9cd 	bl	8001bd8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e064      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x452>
 8003858:	e05c      	b.n	8003914 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <HAL_RCC_OscConfig+0x4b4>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe f9ba 	bl	8001bd8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe f9b6 	bl	8001bd8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e04d      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x480>
 8003886:	e045      	b.n	8003914 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e040      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
 800389c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003920 <HAL_RCC_OscConfig+0x538>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d030      	beq.n	8003910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d129      	bne.n	8003910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d122      	bne.n	8003910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d119      	bne.n	8003910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d10f      	bne.n	8003910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e041      	b.n	80039ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd ff46 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f000 fa7a 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d001      	beq.n	80039dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e046      	b.n	8003a6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a23      	ldr	r2, [pc, #140]	@ (8003a78 <HAL_TIM_Base_Start+0xb4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d022      	beq.n	8003a34 <HAL_TIM_Base_Start+0x70>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f6:	d01d      	beq.n	8003a34 <HAL_TIM_Base_Start+0x70>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <HAL_TIM_Base_Start+0xb8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d018      	beq.n	8003a34 <HAL_TIM_Base_Start+0x70>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	@ (8003a80 <HAL_TIM_Base_Start+0xbc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_TIM_Base_Start+0x70>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <HAL_TIM_Base_Start+0xc0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_TIM_Base_Start+0x70>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <HAL_TIM_Base_Start+0xc4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_TIM_Base_Start+0x70>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a19      	ldr	r2, [pc, #100]	@ (8003a8c <HAL_TIM_Base_Start+0xc8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_TIM_Base_Start+0x70>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <HAL_TIM_Base_Start+0xcc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d010      	beq.n	8003a68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	e007      	b.n	8003a68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40010400 	.word	0x40010400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40001800 	.word	0x40001800

08003a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e041      	b.n	8003b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f839 	bl	8003b32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 f9c2 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0ae      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	f200 809f 	bhi.w	8003cb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b76:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003cb5 	.word	0x08003cb5
 8003b84:	08003cb5 	.word	0x08003cb5
 8003b88:	08003cb5 	.word	0x08003cb5
 8003b8c:	08003bf1 	.word	0x08003bf1
 8003b90:	08003cb5 	.word	0x08003cb5
 8003b94:	08003cb5 	.word	0x08003cb5
 8003b98:	08003cb5 	.word	0x08003cb5
 8003b9c:	08003c33 	.word	0x08003c33
 8003ba0:	08003cb5 	.word	0x08003cb5
 8003ba4:	08003cb5 	.word	0x08003cb5
 8003ba8:	08003cb5 	.word	0x08003cb5
 8003bac:	08003c73 	.word	0x08003c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f9fc 	bl	8003fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0208 	orr.w	r2, r2, #8
 8003bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6999      	ldr	r1, [r3, #24]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	619a      	str	r2, [r3, #24]
      break;
 8003bee:	e064      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa4c 	bl	8004094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	021a      	lsls	r2, r3, #8
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	619a      	str	r2, [r3, #24]
      break;
 8003c30:	e043      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 faa1 	bl	8004180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0208 	orr.w	r2, r2, #8
 8003c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0204 	bic.w	r2, r2, #4
 8003c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69d9      	ldr	r1, [r3, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	61da      	str	r2, [r3, #28]
      break;
 8003c70:	e023      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 faf5 	bl	8004268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69d9      	ldr	r1, [r3, #28]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	021a      	lsls	r2, r3, #8
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	61da      	str	r2, [r3, #28]
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0b4      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x186>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d20:	d03e      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d26:	f200 8087 	bhi.w	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d2e:	f000 8086 	beq.w	8003e3e <HAL_TIM_ConfigClockSource+0x172>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d36:	d87f      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d38:	2b70      	cmp	r3, #112	@ 0x70
 8003d3a:	d01a      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0xa6>
 8003d3c:	2b70      	cmp	r3, #112	@ 0x70
 8003d3e:	d87b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b60      	cmp	r3, #96	@ 0x60
 8003d42:	d050      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x11a>
 8003d44:	2b60      	cmp	r3, #96	@ 0x60
 8003d46:	d877      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d48:	2b50      	cmp	r3, #80	@ 0x50
 8003d4a:	d03c      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d4c:	2b50      	cmp	r3, #80	@ 0x50
 8003d4e:	d873      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b40      	cmp	r3, #64	@ 0x40
 8003d52:	d058      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x13a>
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d86f      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b30      	cmp	r3, #48	@ 0x30
 8003d5a:	d064      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d5c:	2b30      	cmp	r3, #48	@ 0x30
 8003d5e:	d86b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d060      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d867      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05c      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d05a      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d70:	e062      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d82:	f000 fb41 	bl	8004408 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	609a      	str	r2, [r3, #8]
      break;
 8003d9e:	e04f      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db0:	f000 fb2a 	bl	8004408 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dc2:	609a      	str	r2, [r3, #8]
      break;
 8003dc4:	e03c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f000 fa9e 	bl	8004314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2150      	movs	r1, #80	@ 0x50
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 faf7 	bl	80043d2 <TIM_ITRx_SetConfig>
      break;
 8003de4:	e02c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df2:	461a      	mov	r2, r3
 8003df4:	f000 fabd 	bl	8004372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2160      	movs	r1, #96	@ 0x60
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fae7 	bl	80043d2 <TIM_ITRx_SetConfig>
      break;
 8003e04:	e01c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 fa7e 	bl	8004314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2140      	movs	r1, #64	@ 0x40
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fad7 	bl	80043d2 <TIM_ITRx_SetConfig>
      break;
 8003e24:	e00c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 face 	bl	80043d2 <TIM_ITRx_SetConfig>
      break;
 8003e36:	e003      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3c:	e000      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a46      	ldr	r2, [pc, #280]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a43      	ldr	r2, [pc, #268]	@ (8003f8c <TIM_Base_SetConfig+0x130>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a42      	ldr	r2, [pc, #264]	@ (8003f90 <TIM_Base_SetConfig+0x134>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a41      	ldr	r2, [pc, #260]	@ (8003f94 <TIM_Base_SetConfig+0x138>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d027      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <TIM_Base_SetConfig+0x130>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d023      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a31      	ldr	r2, [pc, #196]	@ (8003f90 <TIM_Base_SetConfig+0x134>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	@ (8003f94 <TIM_Base_SetConfig+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f9c <TIM_Base_SetConfig+0x140>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa0 <TIM_Base_SetConfig+0x144>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa4 <TIM_Base_SetConfig+0x148>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <TIM_Base_SetConfig+0x14c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <TIM_Base_SetConfig+0x150>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <TIM_Base_SetConfig+0x154>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	40001800 	.word	0x40001800
 8003fac:	40001c00 	.word	0x40001c00
 8003fb0:	40002000 	.word	0x40002000

08003fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f023 0201 	bic.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a20      	ldr	r2, [pc, #128]	@ (800408c <TIM_OC1_SetConfig+0xd8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC1_SetConfig+0x64>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1f      	ldr	r2, [pc, #124]	@ (8004090 <TIM_OC1_SetConfig+0xdc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d10c      	bne.n	8004032 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0308 	bic.w	r3, r3, #8
 800401e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a15      	ldr	r2, [pc, #84]	@ (800408c <TIM_OC1_SetConfig+0xd8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_OC1_SetConfig+0x8e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <TIM_OC1_SetConfig+0xdc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d111      	bne.n	8004066 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40010000 	.word	0x40010000
 8004090:	40010400 	.word	0x40010400

08004094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 0210 	bic.w	r2, r3, #16
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a22      	ldr	r2, [pc, #136]	@ (8004178 <TIM_OC2_SetConfig+0xe4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC2_SetConfig+0x68>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a21      	ldr	r2, [pc, #132]	@ (800417c <TIM_OC2_SetConfig+0xe8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <TIM_OC2_SetConfig+0xe4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC2_SetConfig+0x94>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a16      	ldr	r2, [pc, #88]	@ (800417c <TIM_OC2_SetConfig+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d113      	bne.n	8004150 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800412e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40010400 	.word	0x40010400

08004180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a21      	ldr	r2, [pc, #132]	@ (8004260 <TIM_OC3_SetConfig+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC3_SetConfig+0x66>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a20      	ldr	r2, [pc, #128]	@ (8004264 <TIM_OC3_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10d      	bne.n	8004202 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <TIM_OC3_SetConfig+0xe0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_OC3_SetConfig+0x92>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <TIM_OC3_SetConfig+0xe4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d113      	bne.n	800423a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	621a      	str	r2, [r3, #32]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40010000 	.word	0x40010000
 8004264:	40010400 	.word	0x40010400

08004268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <TIM_OC4_SetConfig+0xa4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_OC4_SetConfig+0x68>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a11      	ldr	r2, [pc, #68]	@ (8004310 <TIM_OC4_SetConfig+0xa8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d109      	bne.n	80042e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40010400 	.word	0x40010400

08004314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800433e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 030a 	bic.w	r3, r3, #10
 8004350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004372:	b480      	push	{r7}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f023 0210 	bic.w	r2, r3, #16
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800439c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	031b      	lsls	r3, r3, #12
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f043 0307 	orr.w	r3, r3, #7
 80043f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	609a      	str	r2, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	021a      	lsls	r2, r3, #8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	431a      	orrs	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4313      	orrs	r3, r2
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	609a      	str	r2, [r3, #8]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800445c:	2302      	movs	r3, #2
 800445e:	e05a      	b.n	8004516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a21      	ldr	r2, [pc, #132]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d022      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ac:	d01d      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d018      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a17      	ldr	r2, [pc, #92]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a15      	ldr	r2, [pc, #84]	@ (800453c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10c      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40010400 	.word	0x40010400
 8004538:	40014000 	.word	0x40014000
 800453c:	40001800 	.word	0x40001800

08004540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e03d      	b.n	80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e042      	b.n	800467c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd f958 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	@ 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fcdb 	bl	8004fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800465c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b20      	cmp	r3, #32
 800469c:	d112      	bne.n	80046c4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_UART_Receive_IT+0x26>
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00b      	b.n	80046c6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 faba 	bl	8004c34 <UART_Start_Receive_IT>
 80046c0:	4603      	mov	r3, r0
 80046c2:	e000      	b.n	80046c6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b0ba      	sub	sp, #232	@ 0xe8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800470e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_UART_IRQHandler+0x66>
 8004722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fb99 	bl	8004e66 <UART_Receive_IT>
      return;
 8004734:	e25b      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80de 	beq.w	80048fc <HAL_UART_IRQHandler+0x22c>
 8004740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004750:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80d1 	beq.w	80048fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_UART_IRQHandler+0xae>
 8004766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_UART_IRQHandler+0xd2>
 800478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
 80047ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	f043 0204 	orr.w	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d011      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
 80047d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	f043 0208 	orr.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 81f2 	beq.w	8004be4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_UART_IRQHandler+0x14e>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb24 	bl	8004e66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b40      	cmp	r3, #64	@ 0x40
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_UART_IRQHandler+0x17a>
 8004842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04f      	beq.n	80048ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa2c 	bl	8004ca8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485a:	2b40      	cmp	r3, #64	@ 0x40
 800485c:	d141      	bne.n	80048e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800488a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800488e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1d9      	bne.n	800485e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d013      	beq.n	80048da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ab0 <HAL_UART_IRQHandler+0x3e0>)
 80048b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd fe28 	bl	8002514 <HAL_DMA_Abort_IT>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048d4:	4610      	mov	r0, r2
 80048d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e00e      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f994 	bl	8004c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	e00a      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f990 	bl	8004c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	e006      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f98c 	bl	8004c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048f6:	e175      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	bf00      	nop
    return;
 80048fa:	e173      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 814f 	bne.w	8004ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8148 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8141 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	f040 80b6 	bne.w	8004ab4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8145 	beq.w	8004be8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004966:	429a      	cmp	r2, r3
 8004968:	f080 813e 	bcs.w	8004be8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004972:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497e:	f000 8088 	beq.w	8004a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800499c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80049ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d9      	bne.n	8004982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e1      	bne.n	80049ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a62:	f023 0310 	bic.w	r3, r3, #16
 8004a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e3      	bne.n	8004a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fcd1 	bl	8002434 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8b7 	bl	8004c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aae:	e09b      	b.n	8004be8 <HAL_UART_IRQHandler+0x518>
 8004ab0:	08004d6f 	.word	0x08004d6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 808e 	beq.w	8004bec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8089 	beq.w	8004bec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e3      	bne.n	8004ada <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	623b      	str	r3, [r7, #32]
   return(result);
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3314      	adds	r3, #20
 8004b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e3      	bne.n	8004b12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0310 	bic.w	r3, r3, #16
 8004b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b7c:	61fa      	str	r2, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	69b9      	ldr	r1, [r7, #24]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e3      	bne.n	8004b58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f83d 	bl	8004c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ba2:	e023      	b.n	8004bec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x4f4>
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f8ea 	bl	8004d96 <UART_Transmit_IT>
    return;
 8004bc2:	e014      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <HAL_UART_IRQHandler+0x51e>
 8004bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f92a 	bl	8004e36 <UART_EndTransmit_IT>
    return;
 8004be2:	e004      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
    return;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
      return;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HAL_UART_IRQHandler+0x51e>
      return;
 8004bec:	bf00      	nop
  }
}
 8004bee:	37e8      	adds	r7, #232	@ 0xe8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2222      	movs	r2, #34	@ 0x22
 8004c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0220 	orr.w	r2, r2, #32
 8004c98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b095      	sub	sp, #84	@ 0x54
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cd0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3314      	adds	r3, #20
 8004d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e5      	bne.n	8004ce4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d119      	bne.n	8004d54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0310 	bic.w	r3, r3, #16
 8004d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d40:	61ba      	str	r2, [r7, #24]
 8004d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6979      	ldr	r1, [r7, #20]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e5      	bne.n	8004d20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d62:	bf00      	nop
 8004d64:	3754      	adds	r7, #84	@ 0x54
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff ff3d 	bl	8004c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b21      	cmp	r3, #33	@ 0x21
 8004da8:	d13e      	bne.n	8004e28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db2:	d114      	bne.n	8004dde <UART_Transmit_IT+0x48>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]
 8004ddc:	e008      	b.n	8004df0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	1c59      	adds	r1, r3, #1
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6211      	str	r1, [r2, #32]
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10f      	bne.n	8004e24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fecc 	bl	8004bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b08c      	sub	sp, #48	@ 0x30
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b22      	cmp	r3, #34	@ 0x22
 8004e78:	f040 80ae 	bne.w	8004fd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e84:	d117      	bne.n	8004eb6 <UART_Receive_IT+0x50>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d113      	bne.n	8004eb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	1c9a      	adds	r2, r3, #2
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eb4:	e026      	b.n	8004f04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec8:	d007      	beq.n	8004eda <UART_Receive_IT+0x74>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <UART_Receive_IT+0x82>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e008      	b.n	8004efa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4619      	mov	r1, r3
 8004f12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d15d      	bne.n	8004fd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0220 	bic.w	r2, r2, #32
 8004f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d135      	bne.n	8004fca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	613b      	str	r3, [r7, #16]
   return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f84:	623a      	str	r2, [r7, #32]
 8004f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	69f9      	ldr	r1, [r7, #28]
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d10a      	bne.n	8004fbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe2a 	bl	8004c1c <HAL_UARTEx_RxEventCallback>
 8004fc8:	e002      	b.n	8004fd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fb06 	bl	80015dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e002      	b.n	8004fda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3730      	adds	r7, #48	@ 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe8:	b0c0      	sub	sp, #256	@ 0x100
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	68d9      	ldr	r1, [r3, #12]
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	ea40 0301 	orr.w	r3, r0, r1
 800500c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	431a      	orrs	r2, r3
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	431a      	orrs	r2, r3
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800503c:	f021 010c 	bic.w	r1, r1, #12
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800504a:	430b      	orrs	r3, r1
 800504c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	6999      	ldr	r1, [r3, #24]
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	ea40 0301 	orr.w	r3, r0, r1
 800506a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b8f      	ldr	r3, [pc, #572]	@ (80052b0 <UART_SetConfig+0x2cc>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d005      	beq.n	8005084 <UART_SetConfig+0xa0>
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8d      	ldr	r3, [pc, #564]	@ (80052b4 <UART_SetConfig+0x2d0>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d104      	bne.n	800508e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fd ff6c 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8005088:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800508c:	e003      	b.n	8005096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800508e:	f7fd ff53 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8005092:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a0:	f040 810c 	bne.w	80052bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050be:	415b      	adcs	r3, r3
 80050c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050c6:	4621      	mov	r1, r4
 80050c8:	eb12 0801 	adds.w	r8, r2, r1
 80050cc:	4629      	mov	r1, r5
 80050ce:	eb43 0901 	adc.w	r9, r3, r1
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e6:	4690      	mov	r8, r2
 80050e8:	4699      	mov	r9, r3
 80050ea:	4623      	mov	r3, r4
 80050ec:	eb18 0303 	adds.w	r3, r8, r3
 80050f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050f4:	462b      	mov	r3, r5
 80050f6:	eb49 0303 	adc.w	r3, r9, r3
 80050fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800510a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800510e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005112:	460b      	mov	r3, r1
 8005114:	18db      	adds	r3, r3, r3
 8005116:	653b      	str	r3, [r7, #80]	@ 0x50
 8005118:	4613      	mov	r3, r2
 800511a:	eb42 0303 	adc.w	r3, r2, r3
 800511e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005128:	f7fb fd0c 	bl	8000b44 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4b61      	ldr	r3, [pc, #388]	@ (80052b8 <UART_SetConfig+0x2d4>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011c      	lsls	r4, r3, #4
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005144:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005154:	415b      	adcs	r3, r3
 8005156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800515c:	4641      	mov	r1, r8
 800515e:	eb12 0a01 	adds.w	sl, r2, r1
 8005162:	4649      	mov	r1, r9
 8005164:	eb43 0b01 	adc.w	fp, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517c:	4692      	mov	sl, r2
 800517e:	469b      	mov	fp, r3
 8005180:	4643      	mov	r3, r8
 8005182:	eb1a 0303 	adds.w	r3, sl, r3
 8005186:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800518a:	464b      	mov	r3, r9
 800518c:	eb4b 0303 	adc.w	r3, fp, r3
 8005190:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051a8:	460b      	mov	r3, r1
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ae:	4613      	mov	r3, r2
 80051b0:	eb42 0303 	adc.w	r3, r2, r3
 80051b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051be:	f7fb fcc1 	bl	8000b44 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <UART_SetConfig+0x2d4>)
 80051ca:	fba3 2301 	umull	r2, r3, r3, r1
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2264      	movs	r2, #100	@ 0x64
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	1acb      	subs	r3, r1, r3
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051de:	4b36      	ldr	r3, [pc, #216]	@ (80052b8 <UART_SetConfig+0x2d4>)
 80051e0:	fba3 2302 	umull	r2, r3, r3, r2
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051ec:	441c      	add	r4, r3
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005208:	415b      	adcs	r3, r3
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800520c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6339      	str	r1, [r7, #48]	@ 0x30
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005244:	464b      	mov	r3, r9
 8005246:	460a      	mov	r2, r1
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800525c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005264:	460b      	mov	r3, r1
 8005266:	18db      	adds	r3, r3, r3
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800526a:	4613      	mov	r3, r2
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800527a:	f7fb fc63 	bl	8000b44 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <UART_SetConfig+0x2d4>)
 8005284:	fba3 1302 	umull	r1, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	2164      	movs	r1, #100	@ 0x64
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	3332      	adds	r3, #50	@ 0x32
 8005296:	4a08      	ldr	r2, [pc, #32]	@ (80052b8 <UART_SetConfig+0x2d4>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	f003 0207 	and.w	r2, r3, #7
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4422      	add	r2, r4
 80052aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052ac:	e106      	b.n	80054bc <UART_SetConfig+0x4d8>
 80052ae:	bf00      	nop
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40011400 	.word	0x40011400
 80052b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052ce:	4642      	mov	r2, r8
 80052d0:	464b      	mov	r3, r9
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	6239      	str	r1, [r7, #32]
 80052d6:	415b      	adcs	r3, r3
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052de:	4641      	mov	r1, r8
 80052e0:	1854      	adds	r4, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb43 0501 	adc.w	r5, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	00eb      	lsls	r3, r5, #3
 80052f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f6:	00e2      	lsls	r2, r4, #3
 80052f8:	4614      	mov	r4, r2
 80052fa:	461d      	mov	r5, r3
 80052fc:	4643      	mov	r3, r8
 80052fe:	18e3      	adds	r3, r4, r3
 8005300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005304:	464b      	mov	r3, r9
 8005306:	eb45 0303 	adc.w	r3, r5, r3
 800530a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800531a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800532a:	4629      	mov	r1, r5
 800532c:	008b      	lsls	r3, r1, #2
 800532e:	4621      	mov	r1, r4
 8005330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005334:	4621      	mov	r1, r4
 8005336:	008a      	lsls	r2, r1, #2
 8005338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800533c:	f7fb fc02 	bl	8000b44 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4b60      	ldr	r3, [pc, #384]	@ (80054c8 <UART_SetConfig+0x4e4>)
 8005346:	fba3 2302 	umull	r2, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	011c      	lsls	r4, r3, #4
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005358:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800535c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	1891      	adds	r1, r2, r2
 8005366:	61b9      	str	r1, [r7, #24]
 8005368:	415b      	adcs	r3, r3
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005370:	4641      	mov	r1, r8
 8005372:	1851      	adds	r1, r2, r1
 8005374:	6139      	str	r1, [r7, #16]
 8005376:	4649      	mov	r1, r9
 8005378:	414b      	adcs	r3, r1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005388:	4659      	mov	r1, fp
 800538a:	00cb      	lsls	r3, r1, #3
 800538c:	4651      	mov	r1, sl
 800538e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005392:	4651      	mov	r1, sl
 8005394:	00ca      	lsls	r2, r1, #3
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	4603      	mov	r3, r0
 800539c:	4642      	mov	r2, r8
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053a4:	464b      	mov	r3, r9
 80053a6:	460a      	mov	r2, r1
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053c8:	4649      	mov	r1, r9
 80053ca:	008b      	lsls	r3, r1, #2
 80053cc:	4641      	mov	r1, r8
 80053ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d2:	4641      	mov	r1, r8
 80053d4:	008a      	lsls	r2, r1, #2
 80053d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053da:	f7fb fbb3 	bl	8000b44 <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	4b38      	ldr	r3, [pc, #224]	@ (80054c8 <UART_SetConfig+0x4e4>)
 80053e6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2264      	movs	r2, #100	@ 0x64
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	1acb      	subs	r3, r1, r3
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	3332      	adds	r3, #50	@ 0x32
 80053f8:	4a33      	ldr	r2, [pc, #204]	@ (80054c8 <UART_SetConfig+0x4e4>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005404:	441c      	add	r4, r3
 8005406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800540a:	2200      	movs	r2, #0
 800540c:	673b      	str	r3, [r7, #112]	@ 0x70
 800540e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005410:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005414:	4642      	mov	r2, r8
 8005416:	464b      	mov	r3, r9
 8005418:	1891      	adds	r1, r2, r2
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	415b      	adcs	r3, r3
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005424:	4641      	mov	r1, r8
 8005426:	1851      	adds	r1, r2, r1
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	4649      	mov	r1, r9
 800542c:	414b      	adcs	r3, r1
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800543c:	4659      	mov	r1, fp
 800543e:	00cb      	lsls	r3, r1, #3
 8005440:	4651      	mov	r1, sl
 8005442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005446:	4651      	mov	r1, sl
 8005448:	00ca      	lsls	r2, r1, #3
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	4603      	mov	r3, r0
 8005450:	4642      	mov	r2, r8
 8005452:	189b      	adds	r3, r3, r2
 8005454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005456:	464b      	mov	r3, r9
 8005458:	460a      	mov	r2, r1
 800545a:	eb42 0303 	adc.w	r3, r2, r3
 800545e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	663b      	str	r3, [r7, #96]	@ 0x60
 800546a:	667a      	str	r2, [r7, #100]	@ 0x64
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005478:	4649      	mov	r1, r9
 800547a:	008b      	lsls	r3, r1, #2
 800547c:	4641      	mov	r1, r8
 800547e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005482:	4641      	mov	r1, r8
 8005484:	008a      	lsls	r2, r1, #2
 8005486:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800548a:	f7fb fb5b 	bl	8000b44 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <UART_SetConfig+0x4e4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	@ 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	3332      	adds	r3, #50	@ 0x32
 80054a6:	4a08      	ldr	r2, [pc, #32]	@ (80054c8 <UART_SetConfig+0x4e4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4422      	add	r2, r4
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	bf00      	nop
 80054be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054c2:	46bd      	mov	sp, r7
 80054c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c8:	51eb851f 	.word	0x51eb851f

080054cc <memset>:
 80054cc:	4402      	add	r2, r0
 80054ce:	4603      	mov	r3, r0
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d100      	bne.n	80054d6 <memset+0xa>
 80054d4:	4770      	bx	lr
 80054d6:	f803 1b01 	strb.w	r1, [r3], #1
 80054da:	e7f9      	b.n	80054d0 <memset+0x4>

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4d0d      	ldr	r5, [pc, #52]	@ (8005514 <__libc_init_array+0x38>)
 80054e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005518 <__libc_init_array+0x3c>)
 80054e2:	1b64      	subs	r4, r4, r5
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	2600      	movs	r6, #0
 80054e8:	42a6      	cmp	r6, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	4d0b      	ldr	r5, [pc, #44]	@ (800551c <__libc_init_array+0x40>)
 80054ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005520 <__libc_init_array+0x44>)
 80054f0:	f001 f83e 	bl	8006570 <_init>
 80054f4:	1b64      	subs	r4, r4, r5
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	2600      	movs	r6, #0
 80054fa:	42a6      	cmp	r6, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f855 3b04 	ldr.w	r3, [r5], #4
 8005504:	4798      	blx	r3
 8005506:	3601      	adds	r6, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f855 3b04 	ldr.w	r3, [r5], #4
 800550e:	4798      	blx	r3
 8005510:	3601      	adds	r6, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	08006788 	.word	0x08006788
 8005518:	08006788 	.word	0x08006788
 800551c:	08006788 	.word	0x08006788
 8005520:	0800678c 	.word	0x0800678c
 8005524:	00000000 	.word	0x00000000

08005528 <sin>:
 8005528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800552a:	ec53 2b10 	vmov	r2, r3, d0
 800552e:	4826      	ldr	r0, [pc, #152]	@ (80055c8 <sin+0xa0>)
 8005530:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005534:	4281      	cmp	r1, r0
 8005536:	d807      	bhi.n	8005548 <sin+0x20>
 8005538:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80055c0 <sin+0x98>
 800553c:	2000      	movs	r0, #0
 800553e:	b005      	add	sp, #20
 8005540:	f85d eb04 	ldr.w	lr, [sp], #4
 8005544:	f000 b90c 	b.w	8005760 <__kernel_sin>
 8005548:	4820      	ldr	r0, [pc, #128]	@ (80055cc <sin+0xa4>)
 800554a:	4281      	cmp	r1, r0
 800554c:	d908      	bls.n	8005560 <sin+0x38>
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	f7fa fe5d 	bl	8000210 <__aeabi_dsub>
 8005556:	ec41 0b10 	vmov	d0, r0, r1
 800555a:	b005      	add	sp, #20
 800555c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005560:	4668      	mov	r0, sp
 8005562:	f000 f9b9 	bl	80058d8 <__ieee754_rem_pio2>
 8005566:	f000 0003 	and.w	r0, r0, #3
 800556a:	2801      	cmp	r0, #1
 800556c:	d00c      	beq.n	8005588 <sin+0x60>
 800556e:	2802      	cmp	r0, #2
 8005570:	d011      	beq.n	8005596 <sin+0x6e>
 8005572:	b9e8      	cbnz	r0, 80055b0 <sin+0x88>
 8005574:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005578:	ed9d 0b00 	vldr	d0, [sp]
 800557c:	2001      	movs	r0, #1
 800557e:	f000 f8ef 	bl	8005760 <__kernel_sin>
 8005582:	ec51 0b10 	vmov	r0, r1, d0
 8005586:	e7e6      	b.n	8005556 <sin+0x2e>
 8005588:	ed9d 1b02 	vldr	d1, [sp, #8]
 800558c:	ed9d 0b00 	vldr	d0, [sp]
 8005590:	f000 f81e 	bl	80055d0 <__kernel_cos>
 8005594:	e7f5      	b.n	8005582 <sin+0x5a>
 8005596:	ed9d 1b02 	vldr	d1, [sp, #8]
 800559a:	ed9d 0b00 	vldr	d0, [sp]
 800559e:	2001      	movs	r0, #1
 80055a0:	f000 f8de 	bl	8005760 <__kernel_sin>
 80055a4:	ec53 2b10 	vmov	r2, r3, d0
 80055a8:	4610      	mov	r0, r2
 80055aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80055ae:	e7d2      	b.n	8005556 <sin+0x2e>
 80055b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055b4:	ed9d 0b00 	vldr	d0, [sp]
 80055b8:	f000 f80a 	bl	80055d0 <__kernel_cos>
 80055bc:	e7f2      	b.n	80055a4 <sin+0x7c>
 80055be:	bf00      	nop
	...
 80055c8:	3fe921fb 	.word	0x3fe921fb
 80055cc:	7fefffff 	.word	0x7fefffff

080055d0 <__kernel_cos>:
 80055d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	ec57 6b10 	vmov	r6, r7, d0
 80055d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80055dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80055e0:	ed8d 1b00 	vstr	d1, [sp]
 80055e4:	d206      	bcs.n	80055f4 <__kernel_cos+0x24>
 80055e6:	4630      	mov	r0, r6
 80055e8:	4639      	mov	r1, r7
 80055ea:	f7fb fa63 	bl	8000ab4 <__aeabi_d2iz>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f000 8088 	beq.w	8005704 <__kernel_cos+0x134>
 80055f4:	4632      	mov	r2, r6
 80055f6:	463b      	mov	r3, r7
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fa ffc0 	bl	8000580 <__aeabi_dmul>
 8005600:	4b51      	ldr	r3, [pc, #324]	@ (8005748 <__kernel_cos+0x178>)
 8005602:	2200      	movs	r2, #0
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	f7fa ffba 	bl	8000580 <__aeabi_dmul>
 800560c:	a340      	add	r3, pc, #256	@ (adr r3, 8005710 <__kernel_cos+0x140>)
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	4682      	mov	sl, r0
 8005614:	468b      	mov	fp, r1
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	f7fa ffb1 	bl	8000580 <__aeabi_dmul>
 800561e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005718 <__kernel_cos+0x148>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa fdf6 	bl	8000214 <__adddf3>
 8005628:	4622      	mov	r2, r4
 800562a:	462b      	mov	r3, r5
 800562c:	f7fa ffa8 	bl	8000580 <__aeabi_dmul>
 8005630:	a33b      	add	r3, pc, #236	@ (adr r3, 8005720 <__kernel_cos+0x150>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fdeb 	bl	8000210 <__aeabi_dsub>
 800563a:	4622      	mov	r2, r4
 800563c:	462b      	mov	r3, r5
 800563e:	f7fa ff9f 	bl	8000580 <__aeabi_dmul>
 8005642:	a339      	add	r3, pc, #228	@ (adr r3, 8005728 <__kernel_cos+0x158>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa fde4 	bl	8000214 <__adddf3>
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	f7fa ff96 	bl	8000580 <__aeabi_dmul>
 8005654:	a336      	add	r3, pc, #216	@ (adr r3, 8005730 <__kernel_cos+0x160>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa fdd9 	bl	8000210 <__aeabi_dsub>
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	f7fa ff8d 	bl	8000580 <__aeabi_dmul>
 8005666:	a334      	add	r3, pc, #208	@ (adr r3, 8005738 <__kernel_cos+0x168>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa fdd2 	bl	8000214 <__adddf3>
 8005670:	4622      	mov	r2, r4
 8005672:	462b      	mov	r3, r5
 8005674:	f7fa ff84 	bl	8000580 <__aeabi_dmul>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ff80 	bl	8000580 <__aeabi_dmul>
 8005680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4630      	mov	r0, r6
 800568a:	4639      	mov	r1, r7
 800568c:	f7fa ff78 	bl	8000580 <__aeabi_dmul>
 8005690:	460b      	mov	r3, r1
 8005692:	4602      	mov	r2, r0
 8005694:	4629      	mov	r1, r5
 8005696:	4620      	mov	r0, r4
 8005698:	f7fa fdba 	bl	8000210 <__aeabi_dsub>
 800569c:	4b2b      	ldr	r3, [pc, #172]	@ (800574c <__kernel_cos+0x17c>)
 800569e:	4598      	cmp	r8, r3
 80056a0:	4606      	mov	r6, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	d810      	bhi.n	80056c8 <__kernel_cos+0xf8>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4650      	mov	r0, sl
 80056ac:	4659      	mov	r1, fp
 80056ae:	f7fa fdaf 	bl	8000210 <__aeabi_dsub>
 80056b2:	460b      	mov	r3, r1
 80056b4:	4926      	ldr	r1, [pc, #152]	@ (8005750 <__kernel_cos+0x180>)
 80056b6:	4602      	mov	r2, r0
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7fa fda9 	bl	8000210 <__aeabi_dsub>
 80056be:	ec41 0b10 	vmov	d0, r0, r1
 80056c2:	b003      	add	sp, #12
 80056c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c8:	4b22      	ldr	r3, [pc, #136]	@ (8005754 <__kernel_cos+0x184>)
 80056ca:	4921      	ldr	r1, [pc, #132]	@ (8005750 <__kernel_cos+0x180>)
 80056cc:	4598      	cmp	r8, r3
 80056ce:	bf8c      	ite	hi
 80056d0:	4d21      	ldrhi	r5, [pc, #132]	@ (8005758 <__kernel_cos+0x188>)
 80056d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80056d6:	2400      	movs	r4, #0
 80056d8:	4622      	mov	r2, r4
 80056da:	462b      	mov	r3, r5
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fa fd97 	bl	8000210 <__aeabi_dsub>
 80056e2:	4622      	mov	r2, r4
 80056e4:	4680      	mov	r8, r0
 80056e6:	4689      	mov	r9, r1
 80056e8:	462b      	mov	r3, r5
 80056ea:	4650      	mov	r0, sl
 80056ec:	4659      	mov	r1, fp
 80056ee:	f7fa fd8f 	bl	8000210 <__aeabi_dsub>
 80056f2:	4632      	mov	r2, r6
 80056f4:	463b      	mov	r3, r7
 80056f6:	f7fa fd8b 	bl	8000210 <__aeabi_dsub>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	e7da      	b.n	80056ba <__kernel_cos+0xea>
 8005704:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005740 <__kernel_cos+0x170>
 8005708:	e7db      	b.n	80056c2 <__kernel_cos+0xf2>
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w
 8005710:	be8838d4 	.word	0xbe8838d4
 8005714:	bda8fae9 	.word	0xbda8fae9
 8005718:	bdb4b1c4 	.word	0xbdb4b1c4
 800571c:	3e21ee9e 	.word	0x3e21ee9e
 8005720:	809c52ad 	.word	0x809c52ad
 8005724:	3e927e4f 	.word	0x3e927e4f
 8005728:	19cb1590 	.word	0x19cb1590
 800572c:	3efa01a0 	.word	0x3efa01a0
 8005730:	16c15177 	.word	0x16c15177
 8005734:	3f56c16c 	.word	0x3f56c16c
 8005738:	5555554c 	.word	0x5555554c
 800573c:	3fa55555 	.word	0x3fa55555
 8005740:	00000000 	.word	0x00000000
 8005744:	3ff00000 	.word	0x3ff00000
 8005748:	3fe00000 	.word	0x3fe00000
 800574c:	3fd33332 	.word	0x3fd33332
 8005750:	3ff00000 	.word	0x3ff00000
 8005754:	3fe90000 	.word	0x3fe90000
 8005758:	3fd20000 	.word	0x3fd20000
 800575c:	00000000 	.word	0x00000000

08005760 <__kernel_sin>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	ec55 4b10 	vmov	r4, r5, d0
 8005768:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800576c:	b085      	sub	sp, #20
 800576e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005772:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005776:	4680      	mov	r8, r0
 8005778:	d205      	bcs.n	8005786 <__kernel_sin+0x26>
 800577a:	4620      	mov	r0, r4
 800577c:	4629      	mov	r1, r5
 800577e:	f7fb f999 	bl	8000ab4 <__aeabi_d2iz>
 8005782:	2800      	cmp	r0, #0
 8005784:	d052      	beq.n	800582c <__kernel_sin+0xcc>
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	4620      	mov	r0, r4
 800578c:	4629      	mov	r1, r5
 800578e:	f7fa fef7 	bl	8000580 <__aeabi_dmul>
 8005792:	4682      	mov	sl, r0
 8005794:	468b      	mov	fp, r1
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4620      	mov	r0, r4
 800579c:	4629      	mov	r1, r5
 800579e:	f7fa feef 	bl	8000580 <__aeabi_dmul>
 80057a2:	a342      	add	r3, pc, #264	@ (adr r3, 80058ac <__kernel_sin+0x14c>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	e9cd 0100 	strd	r0, r1, [sp]
 80057ac:	4650      	mov	r0, sl
 80057ae:	4659      	mov	r1, fp
 80057b0:	f7fa fee6 	bl	8000580 <__aeabi_dmul>
 80057b4:	a33f      	add	r3, pc, #252	@ (adr r3, 80058b4 <__kernel_sin+0x154>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fa fd29 	bl	8000210 <__aeabi_dsub>
 80057be:	4652      	mov	r2, sl
 80057c0:	465b      	mov	r3, fp
 80057c2:	f7fa fedd 	bl	8000580 <__aeabi_dmul>
 80057c6:	a33d      	add	r3, pc, #244	@ (adr r3, 80058bc <__kernel_sin+0x15c>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa fd22 	bl	8000214 <__adddf3>
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	f7fa fed4 	bl	8000580 <__aeabi_dmul>
 80057d8:	a33a      	add	r3, pc, #232	@ (adr r3, 80058c4 <__kernel_sin+0x164>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa fd17 	bl	8000210 <__aeabi_dsub>
 80057e2:	4652      	mov	r2, sl
 80057e4:	465b      	mov	r3, fp
 80057e6:	f7fa fecb 	bl	8000580 <__aeabi_dmul>
 80057ea:	a338      	add	r3, pc, #224	@ (adr r3, 80058cc <__kernel_sin+0x16c>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f7fa fd10 	bl	8000214 <__adddf3>
 80057f4:	4606      	mov	r6, r0
 80057f6:	460f      	mov	r7, r1
 80057f8:	f1b8 0f00 	cmp.w	r8, #0
 80057fc:	d11b      	bne.n	8005836 <__kernel_sin+0xd6>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4650      	mov	r0, sl
 8005804:	4659      	mov	r1, fp
 8005806:	f7fa febb 	bl	8000580 <__aeabi_dmul>
 800580a:	a325      	add	r3, pc, #148	@ (adr r3, 80058a0 <__kernel_sin+0x140>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa fcfe 	bl	8000210 <__aeabi_dsub>
 8005814:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005818:	f7fa feb2 	bl	8000580 <__aeabi_dmul>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4620      	mov	r0, r4
 8005822:	4629      	mov	r1, r5
 8005824:	f7fa fcf6 	bl	8000214 <__adddf3>
 8005828:	4604      	mov	r4, r0
 800582a:	460d      	mov	r5, r1
 800582c:	ec45 4b10 	vmov	d0, r4, r5
 8005830:	b005      	add	sp, #20
 8005832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800583a:	4b1b      	ldr	r3, [pc, #108]	@ (80058a8 <__kernel_sin+0x148>)
 800583c:	2200      	movs	r2, #0
 800583e:	f7fa fe9f 	bl	8000580 <__aeabi_dmul>
 8005842:	4632      	mov	r2, r6
 8005844:	4680      	mov	r8, r0
 8005846:	4689      	mov	r9, r1
 8005848:	463b      	mov	r3, r7
 800584a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800584e:	f7fa fe97 	bl	8000580 <__aeabi_dmul>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4640      	mov	r0, r8
 8005858:	4649      	mov	r1, r9
 800585a:	f7fa fcd9 	bl	8000210 <__aeabi_dsub>
 800585e:	4652      	mov	r2, sl
 8005860:	465b      	mov	r3, fp
 8005862:	f7fa fe8d 	bl	8000580 <__aeabi_dmul>
 8005866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800586a:	f7fa fcd1 	bl	8000210 <__aeabi_dsub>
 800586e:	a30c      	add	r3, pc, #48	@ (adr r3, 80058a0 <__kernel_sin+0x140>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	4606      	mov	r6, r0
 8005876:	460f      	mov	r7, r1
 8005878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800587c:	f7fa fe80 	bl	8000580 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4630      	mov	r0, r6
 8005886:	4639      	mov	r1, r7
 8005888:	f7fa fcc4 	bl	8000214 <__adddf3>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f7fa fcbc 	bl	8000210 <__aeabi_dsub>
 8005898:	e7c6      	b.n	8005828 <__kernel_sin+0xc8>
 800589a:	bf00      	nop
 800589c:	f3af 8000 	nop.w
 80058a0:	55555549 	.word	0x55555549
 80058a4:	3fc55555 	.word	0x3fc55555
 80058a8:	3fe00000 	.word	0x3fe00000
 80058ac:	5acfd57c 	.word	0x5acfd57c
 80058b0:	3de5d93a 	.word	0x3de5d93a
 80058b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80058b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80058bc:	57b1fe7d 	.word	0x57b1fe7d
 80058c0:	3ec71de3 	.word	0x3ec71de3
 80058c4:	19c161d5 	.word	0x19c161d5
 80058c8:	3f2a01a0 	.word	0x3f2a01a0
 80058cc:	1110f8a6 	.word	0x1110f8a6
 80058d0:	3f811111 	.word	0x3f811111
 80058d4:	00000000 	.word	0x00000000

080058d8 <__ieee754_rem_pio2>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	ec57 6b10 	vmov	r6, r7, d0
 80058e0:	4bc5      	ldr	r3, [pc, #788]	@ (8005bf8 <__ieee754_rem_pio2+0x320>)
 80058e2:	b08d      	sub	sp, #52	@ 0x34
 80058e4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80058e8:	4598      	cmp	r8, r3
 80058ea:	4604      	mov	r4, r0
 80058ec:	9704      	str	r7, [sp, #16]
 80058ee:	d807      	bhi.n	8005900 <__ieee754_rem_pio2+0x28>
 80058f0:	2200      	movs	r2, #0
 80058f2:	2300      	movs	r3, #0
 80058f4:	ed80 0b00 	vstr	d0, [r0]
 80058f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80058fc:	2500      	movs	r5, #0
 80058fe:	e028      	b.n	8005952 <__ieee754_rem_pio2+0x7a>
 8005900:	4bbe      	ldr	r3, [pc, #760]	@ (8005bfc <__ieee754_rem_pio2+0x324>)
 8005902:	4598      	cmp	r8, r3
 8005904:	d878      	bhi.n	80059f8 <__ieee754_rem_pio2+0x120>
 8005906:	9b04      	ldr	r3, [sp, #16]
 8005908:	4dbd      	ldr	r5, [pc, #756]	@ (8005c00 <__ieee754_rem_pio2+0x328>)
 800590a:	2b00      	cmp	r3, #0
 800590c:	4630      	mov	r0, r6
 800590e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005bc0 <__ieee754_rem_pio2+0x2e8>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	4639      	mov	r1, r7
 8005916:	dd38      	ble.n	800598a <__ieee754_rem_pio2+0xb2>
 8005918:	f7fa fc7a 	bl	8000210 <__aeabi_dsub>
 800591c:	45a8      	cmp	r8, r5
 800591e:	4606      	mov	r6, r0
 8005920:	460f      	mov	r7, r1
 8005922:	d01a      	beq.n	800595a <__ieee754_rem_pio2+0x82>
 8005924:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2f0>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fa fc71 	bl	8000210 <__aeabi_dsub>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4680      	mov	r8, r0
 8005934:	4689      	mov	r9, r1
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	f7fa fc69 	bl	8000210 <__aeabi_dsub>
 800593e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2f0>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f7fa fc64 	bl	8000210 <__aeabi_dsub>
 8005948:	e9c4 8900 	strd	r8, r9, [r4]
 800594c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005950:	2501      	movs	r5, #1
 8005952:	4628      	mov	r0, r5
 8005954:	b00d      	add	sp, #52	@ 0x34
 8005956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595a:	a39d      	add	r3, pc, #628	@ (adr r3, 8005bd0 <__ieee754_rem_pio2+0x2f8>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f7fa fc56 	bl	8000210 <__aeabi_dsub>
 8005964:	a39c      	add	r3, pc, #624	@ (adr r3, 8005bd8 <__ieee754_rem_pio2+0x300>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	4606      	mov	r6, r0
 800596c:	460f      	mov	r7, r1
 800596e:	f7fa fc4f 	bl	8000210 <__aeabi_dsub>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4680      	mov	r8, r0
 8005978:	4689      	mov	r9, r1
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fa fc47 	bl	8000210 <__aeabi_dsub>
 8005982:	a395      	add	r3, pc, #596	@ (adr r3, 8005bd8 <__ieee754_rem_pio2+0x300>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	e7dc      	b.n	8005944 <__ieee754_rem_pio2+0x6c>
 800598a:	f7fa fc43 	bl	8000214 <__adddf3>
 800598e:	45a8      	cmp	r8, r5
 8005990:	4606      	mov	r6, r0
 8005992:	460f      	mov	r7, r1
 8005994:	d018      	beq.n	80059c8 <__ieee754_rem_pio2+0xf0>
 8005996:	a38c      	add	r3, pc, #560	@ (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2f0>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f7fa fc3a 	bl	8000214 <__adddf3>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4680      	mov	r8, r0
 80059a6:	4689      	mov	r9, r1
 80059a8:	4630      	mov	r0, r6
 80059aa:	4639      	mov	r1, r7
 80059ac:	f7fa fc30 	bl	8000210 <__aeabi_dsub>
 80059b0:	a385      	add	r3, pc, #532	@ (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2f0>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fa fc2d 	bl	8000214 <__adddf3>
 80059ba:	f04f 35ff 	mov.w	r5, #4294967295
 80059be:	e9c4 8900 	strd	r8, r9, [r4]
 80059c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80059c6:	e7c4      	b.n	8005952 <__ieee754_rem_pio2+0x7a>
 80059c8:	a381      	add	r3, pc, #516	@ (adr r3, 8005bd0 <__ieee754_rem_pio2+0x2f8>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa fc21 	bl	8000214 <__adddf3>
 80059d2:	a381      	add	r3, pc, #516	@ (adr r3, 8005bd8 <__ieee754_rem_pio2+0x300>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	4606      	mov	r6, r0
 80059da:	460f      	mov	r7, r1
 80059dc:	f7fa fc1a 	bl	8000214 <__adddf3>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4680      	mov	r8, r0
 80059e6:	4689      	mov	r9, r1
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	f7fa fc10 	bl	8000210 <__aeabi_dsub>
 80059f0:	a379      	add	r3, pc, #484	@ (adr r3, 8005bd8 <__ieee754_rem_pio2+0x300>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	e7de      	b.n	80059b6 <__ieee754_rem_pio2+0xde>
 80059f8:	4b82      	ldr	r3, [pc, #520]	@ (8005c04 <__ieee754_rem_pio2+0x32c>)
 80059fa:	4598      	cmp	r8, r3
 80059fc:	f200 80d1 	bhi.w	8005ba2 <__ieee754_rem_pio2+0x2ca>
 8005a00:	f000 f966 	bl	8005cd0 <fabs>
 8005a04:	ec57 6b10 	vmov	r6, r7, d0
 8005a08:	a375      	add	r3, pc, #468	@ (adr r3, 8005be0 <__ieee754_rem_pio2+0x308>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	4630      	mov	r0, r6
 8005a10:	4639      	mov	r1, r7
 8005a12:	f7fa fdb5 	bl	8000580 <__aeabi_dmul>
 8005a16:	4b7c      	ldr	r3, [pc, #496]	@ (8005c08 <__ieee754_rem_pio2+0x330>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f7fa fbfb 	bl	8000214 <__adddf3>
 8005a1e:	f7fb f849 	bl	8000ab4 <__aeabi_d2iz>
 8005a22:	4605      	mov	r5, r0
 8005a24:	f7fa fd42 	bl	80004ac <__aeabi_i2d>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a30:	a363      	add	r3, pc, #396	@ (adr r3, 8005bc0 <__ieee754_rem_pio2+0x2e8>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fda3 	bl	8000580 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fbe5 	bl	8000210 <__aeabi_dsub>
 8005a46:	a360      	add	r3, pc, #384	@ (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2f0>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	468b      	mov	fp, r1
 8005a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a54:	f7fa fd94 	bl	8000580 <__aeabi_dmul>
 8005a58:	2d1f      	cmp	r5, #31
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	dc0c      	bgt.n	8005a7a <__ieee754_rem_pio2+0x1a2>
 8005a60:	4b6a      	ldr	r3, [pc, #424]	@ (8005c0c <__ieee754_rem_pio2+0x334>)
 8005a62:	1e6a      	subs	r2, r5, #1
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	4543      	cmp	r3, r8
 8005a6a:	d006      	beq.n	8005a7a <__ieee754_rem_pio2+0x1a2>
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	463b      	mov	r3, r7
 8005a70:	4650      	mov	r0, sl
 8005a72:	4659      	mov	r1, fp
 8005a74:	f7fa fbcc 	bl	8000210 <__aeabi_dsub>
 8005a78:	e00e      	b.n	8005a98 <__ieee754_rem_pio2+0x1c0>
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	4650      	mov	r0, sl
 8005a80:	4659      	mov	r1, fp
 8005a82:	f7fa fbc5 	bl	8000210 <__aeabi_dsub>
 8005a86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	dc02      	bgt.n	8005a9e <__ieee754_rem_pio2+0x1c6>
 8005a98:	e9c4 0100 	strd	r0, r1, [r4]
 8005a9c:	e039      	b.n	8005b12 <__ieee754_rem_pio2+0x23a>
 8005a9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005bd0 <__ieee754_rem_pio2+0x2f8>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa8:	f7fa fd6a 	bl	8000580 <__aeabi_dmul>
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	f7fa fbaa 	bl	8000210 <__aeabi_dsub>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	4689      	mov	r9, r1
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	f7fa fba2 	bl	8000210 <__aeabi_dsub>
 8005acc:	4632      	mov	r2, r6
 8005ace:	463b      	mov	r3, r7
 8005ad0:	f7fa fb9e 	bl	8000210 <__aeabi_dsub>
 8005ad4:	a340      	add	r3, pc, #256	@ (adr r3, 8005bd8 <__ieee754_rem_pio2+0x300>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	4606      	mov	r6, r0
 8005adc:	460f      	mov	r7, r1
 8005ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ae2:	f7fa fd4d 	bl	8000580 <__aeabi_dmul>
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	463b      	mov	r3, r7
 8005aea:	f7fa fb91 	bl	8000210 <__aeabi_dsub>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4606      	mov	r6, r0
 8005af4:	460f      	mov	r7, r1
 8005af6:	4640      	mov	r0, r8
 8005af8:	4649      	mov	r1, r9
 8005afa:	f7fa fb89 	bl	8000210 <__aeabi_dsub>
 8005afe:	9a05      	ldr	r2, [sp, #20]
 8005b00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b31      	cmp	r3, #49	@ 0x31
 8005b08:	dc20      	bgt.n	8005b4c <__ieee754_rem_pio2+0x274>
 8005b0a:	e9c4 0100 	strd	r0, r1, [r4]
 8005b0e:	46c2      	mov	sl, r8
 8005b10:	46cb      	mov	fp, r9
 8005b12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005b16:	4650      	mov	r0, sl
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	f7fa fb77 	bl	8000210 <__aeabi_dsub>
 8005b22:	463b      	mov	r3, r7
 8005b24:	4632      	mov	r2, r6
 8005b26:	f7fa fb73 	bl	8000210 <__aeabi_dsub>
 8005b2a:	9b04      	ldr	r3, [sp, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b32:	f6bf af0e 	bge.w	8005952 <__ieee754_rem_pio2+0x7a>
 8005b36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b40:	f8c4 8000 	str.w	r8, [r4]
 8005b44:	60a0      	str	r0, [r4, #8]
 8005b46:	60e3      	str	r3, [r4, #12]
 8005b48:	426d      	negs	r5, r5
 8005b4a:	e702      	b.n	8005952 <__ieee754_rem_pio2+0x7a>
 8005b4c:	a326      	add	r3, pc, #152	@ (adr r3, 8005be8 <__ieee754_rem_pio2+0x310>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b56:	f7fa fd13 	bl	8000580 <__aeabi_dmul>
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4640      	mov	r0, r8
 8005b64:	4649      	mov	r1, r9
 8005b66:	f7fa fb53 	bl	8000210 <__aeabi_dsub>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4682      	mov	sl, r0
 8005b70:	468b      	mov	fp, r1
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fa fb4b 	bl	8000210 <__aeabi_dsub>
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	f7fa fb47 	bl	8000210 <__aeabi_dsub>
 8005b82:	a31b      	add	r3, pc, #108	@ (adr r3, 8005bf0 <__ieee754_rem_pio2+0x318>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	4606      	mov	r6, r0
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b90:	f7fa fcf6 	bl	8000580 <__aeabi_dmul>
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	f7fa fb3a 	bl	8000210 <__aeabi_dsub>
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	460f      	mov	r7, r1
 8005ba0:	e764      	b.n	8005a6c <__ieee754_rem_pio2+0x194>
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <__ieee754_rem_pio2+0x338>)
 8005ba4:	4598      	cmp	r8, r3
 8005ba6:	d935      	bls.n	8005c14 <__ieee754_rem_pio2+0x33c>
 8005ba8:	4632      	mov	r2, r6
 8005baa:	463b      	mov	r3, r7
 8005bac:	4630      	mov	r0, r6
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f7fa fb2e 	bl	8000210 <__aeabi_dsub>
 8005bb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bb8:	e9c4 0100 	strd	r0, r1, [r4]
 8005bbc:	e69e      	b.n	80058fc <__ieee754_rem_pio2+0x24>
 8005bbe:	bf00      	nop
 8005bc0:	54400000 	.word	0x54400000
 8005bc4:	3ff921fb 	.word	0x3ff921fb
 8005bc8:	1a626331 	.word	0x1a626331
 8005bcc:	3dd0b461 	.word	0x3dd0b461
 8005bd0:	1a600000 	.word	0x1a600000
 8005bd4:	3dd0b461 	.word	0x3dd0b461
 8005bd8:	2e037073 	.word	0x2e037073
 8005bdc:	3ba3198a 	.word	0x3ba3198a
 8005be0:	6dc9c883 	.word	0x6dc9c883
 8005be4:	3fe45f30 	.word	0x3fe45f30
 8005be8:	2e000000 	.word	0x2e000000
 8005bec:	3ba3198a 	.word	0x3ba3198a
 8005bf0:	252049c1 	.word	0x252049c1
 8005bf4:	397b839a 	.word	0x397b839a
 8005bf8:	3fe921fb 	.word	0x3fe921fb
 8005bfc:	4002d97b 	.word	0x4002d97b
 8005c00:	3ff921fb 	.word	0x3ff921fb
 8005c04:	413921fb 	.word	0x413921fb
 8005c08:	3fe00000 	.word	0x3fe00000
 8005c0c:	080065a8 	.word	0x080065a8
 8005c10:	7fefffff 	.word	0x7fefffff
 8005c14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005c18:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005c1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005c20:	4630      	mov	r0, r6
 8005c22:	460f      	mov	r7, r1
 8005c24:	f7fa ff46 	bl	8000ab4 <__aeabi_d2iz>
 8005c28:	f7fa fc40 	bl	80004ac <__aeabi_i2d>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c38:	f7fa faea 	bl	8000210 <__aeabi_dsub>
 8005c3c:	4b22      	ldr	r3, [pc, #136]	@ (8005cc8 <__ieee754_rem_pio2+0x3f0>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f7fa fc9e 	bl	8000580 <__aeabi_dmul>
 8005c44:	460f      	mov	r7, r1
 8005c46:	4606      	mov	r6, r0
 8005c48:	f7fa ff34 	bl	8000ab4 <__aeabi_d2iz>
 8005c4c:	f7fa fc2e 	bl	80004ac <__aeabi_i2d>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c5c:	f7fa fad8 	bl	8000210 <__aeabi_dsub>
 8005c60:	4b19      	ldr	r3, [pc, #100]	@ (8005cc8 <__ieee754_rem_pio2+0x3f0>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	f7fa fc8c 	bl	8000580 <__aeabi_dmul>
 8005c68:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005c6c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005c70:	f04f 0803 	mov.w	r8, #3
 8005c74:	2600      	movs	r6, #0
 8005c76:	2700      	movs	r7, #0
 8005c78:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	463b      	mov	r3, r7
 8005c80:	46c2      	mov	sl, r8
 8005c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c86:	f7fa fee3 	bl	8000a50 <__aeabi_dcmpeq>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d1f4      	bne.n	8005c78 <__ieee754_rem_pio2+0x3a0>
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005ccc <__ieee754_rem_pio2+0x3f4>)
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	2302      	movs	r3, #2
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	462a      	mov	r2, r5
 8005c98:	4653      	mov	r3, sl
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	a806      	add	r0, sp, #24
 8005c9e:	f000 f81f 	bl	8005ce0 <__kernel_rem_pio2>
 8005ca2:	9b04      	ldr	r3, [sp, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	f6bf ae53 	bge.w	8005952 <__ieee754_rem_pio2+0x7a>
 8005cac:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005cb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cb4:	e9c4 2300 	strd	r2, r3, [r4]
 8005cb8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005cbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cc0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005cc4:	e740      	b.n	8005b48 <__ieee754_rem_pio2+0x270>
 8005cc6:	bf00      	nop
 8005cc8:	41700000 	.word	0x41700000
 8005ccc:	08006628 	.word	0x08006628

08005cd0 <fabs>:
 8005cd0:	ec51 0b10 	vmov	r0, r1, d0
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005cda:	ec43 2b10 	vmov	d0, r2, r3
 8005cde:	4770      	bx	lr

08005ce0 <__kernel_rem_pio2>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	ed2d 8b02 	vpush	{d8}
 8005ce8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005cec:	f112 0f14 	cmn.w	r2, #20
 8005cf0:	9306      	str	r3, [sp, #24]
 8005cf2:	9104      	str	r1, [sp, #16]
 8005cf4:	4bc2      	ldr	r3, [pc, #776]	@ (8006000 <__kernel_rem_pio2+0x320>)
 8005cf6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005cf8:	9008      	str	r0, [sp, #32]
 8005cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	9b06      	ldr	r3, [sp, #24]
 8005d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d06:	bfa8      	it	ge
 8005d08:	1ed4      	subge	r4, r2, #3
 8005d0a:	9305      	str	r3, [sp, #20]
 8005d0c:	bfb2      	itee	lt
 8005d0e:	2400      	movlt	r4, #0
 8005d10:	2318      	movge	r3, #24
 8005d12:	fb94 f4f3 	sdivge	r4, r4, r3
 8005d16:	f06f 0317 	mvn.w	r3, #23
 8005d1a:	fb04 3303 	mla	r3, r4, r3, r3
 8005d1e:	eb03 0b02 	add.w	fp, r3, r2
 8005d22:	9b00      	ldr	r3, [sp, #0]
 8005d24:	9a05      	ldr	r2, [sp, #20]
 8005d26:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8005ff0 <__kernel_rem_pio2+0x310>
 8005d2a:	eb03 0802 	add.w	r8, r3, r2
 8005d2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005d30:	1aa7      	subs	r7, r4, r2
 8005d32:	ae20      	add	r6, sp, #128	@ 0x80
 8005d34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005d38:	2500      	movs	r5, #0
 8005d3a:	4545      	cmp	r5, r8
 8005d3c:	dd12      	ble.n	8005d64 <__kernel_rem_pio2+0x84>
 8005d3e:	9b06      	ldr	r3, [sp, #24]
 8005d40:	aa20      	add	r2, sp, #128	@ 0x80
 8005d42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005d46:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005d4a:	2700      	movs	r7, #0
 8005d4c:	9b00      	ldr	r3, [sp, #0]
 8005d4e:	429f      	cmp	r7, r3
 8005d50:	dc2e      	bgt.n	8005db0 <__kernel_rem_pio2+0xd0>
 8005d52:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8005ff0 <__kernel_rem_pio2+0x310>
 8005d56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d5e:	46a8      	mov	r8, r5
 8005d60:	2600      	movs	r6, #0
 8005d62:	e01b      	b.n	8005d9c <__kernel_rem_pio2+0xbc>
 8005d64:	42ef      	cmn	r7, r5
 8005d66:	d407      	bmi.n	8005d78 <__kernel_rem_pio2+0x98>
 8005d68:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005d6c:	f7fa fb9e 	bl	80004ac <__aeabi_i2d>
 8005d70:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005d74:	3501      	adds	r5, #1
 8005d76:	e7e0      	b.n	8005d3a <__kernel_rem_pio2+0x5a>
 8005d78:	ec51 0b18 	vmov	r0, r1, d8
 8005d7c:	e7f8      	b.n	8005d70 <__kernel_rem_pio2+0x90>
 8005d7e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8005d82:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005d86:	f7fa fbfb 	bl	8000580 <__aeabi_dmul>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d92:	f7fa fa3f 	bl	8000214 <__adddf3>
 8005d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d9a:	3601      	adds	r6, #1
 8005d9c:	9b05      	ldr	r3, [sp, #20]
 8005d9e:	429e      	cmp	r6, r3
 8005da0:	dded      	ble.n	8005d7e <__kernel_rem_pio2+0x9e>
 8005da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005da6:	3701      	adds	r7, #1
 8005da8:	ecaa 7b02 	vstmia	sl!, {d7}
 8005dac:	3508      	adds	r5, #8
 8005dae:	e7cd      	b.n	8005d4c <__kernel_rem_pio2+0x6c>
 8005db0:	9b00      	ldr	r3, [sp, #0]
 8005db2:	f8dd 8000 	ldr.w	r8, [sp]
 8005db6:	aa0c      	add	r2, sp, #48	@ 0x30
 8005db8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005dbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dbe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005dc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005dca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dcc:	ab98      	add	r3, sp, #608	@ 0x260
 8005dce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005dd2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005dd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dda:	ac0c      	add	r4, sp, #48	@ 0x30
 8005ddc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005dde:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005de2:	46a1      	mov	r9, r4
 8005de4:	46c2      	mov	sl, r8
 8005de6:	f1ba 0f00 	cmp.w	sl, #0
 8005dea:	dc77      	bgt.n	8005edc <__kernel_rem_pio2+0x1fc>
 8005dec:	4658      	mov	r0, fp
 8005dee:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005df2:	f000 fac5 	bl	8006380 <scalbn>
 8005df6:	ec57 6b10 	vmov	r6, r7, d0
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa fbbc 	bl	8000580 <__aeabi_dmul>
 8005e08:	ec41 0b10 	vmov	d0, r0, r1
 8005e0c:	f000 fb34 	bl	8006478 <floor>
 8005e10:	4b7c      	ldr	r3, [pc, #496]	@ (8006004 <__kernel_rem_pio2+0x324>)
 8005e12:	ec51 0b10 	vmov	r0, r1, d0
 8005e16:	2200      	movs	r2, #0
 8005e18:	f7fa fbb2 	bl	8000580 <__aeabi_dmul>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4630      	mov	r0, r6
 8005e22:	4639      	mov	r1, r7
 8005e24:	f7fa f9f4 	bl	8000210 <__aeabi_dsub>
 8005e28:	460f      	mov	r7, r1
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	f7fa fe42 	bl	8000ab4 <__aeabi_d2iz>
 8005e30:	9002      	str	r0, [sp, #8]
 8005e32:	f7fa fb3b 	bl	80004ac <__aeabi_i2d>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f7fa f9e7 	bl	8000210 <__aeabi_dsub>
 8005e42:	f1bb 0f00 	cmp.w	fp, #0
 8005e46:	4606      	mov	r6, r0
 8005e48:	460f      	mov	r7, r1
 8005e4a:	dd6c      	ble.n	8005f26 <__kernel_rem_pio2+0x246>
 8005e4c:	f108 31ff 	add.w	r1, r8, #4294967295
 8005e50:	ab0c      	add	r3, sp, #48	@ 0x30
 8005e52:	9d02      	ldr	r5, [sp, #8]
 8005e54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e58:	f1cb 0018 	rsb	r0, fp, #24
 8005e5c:	fa43 f200 	asr.w	r2, r3, r0
 8005e60:	4415      	add	r5, r2
 8005e62:	4082      	lsls	r2, r0
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	aa0c      	add	r2, sp, #48	@ 0x30
 8005e68:	9502      	str	r5, [sp, #8]
 8005e6a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005e6e:	f1cb 0217 	rsb	r2, fp, #23
 8005e72:	fa43 f902 	asr.w	r9, r3, r2
 8005e76:	f1b9 0f00 	cmp.w	r9, #0
 8005e7a:	dd64      	ble.n	8005f46 <__kernel_rem_pio2+0x266>
 8005e7c:	9b02      	ldr	r3, [sp, #8]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	3301      	adds	r3, #1
 8005e82:	9302      	str	r3, [sp, #8]
 8005e84:	4615      	mov	r5, r2
 8005e86:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005e8a:	4590      	cmp	r8, r2
 8005e8c:	f300 80a1 	bgt.w	8005fd2 <__kernel_rem_pio2+0x2f2>
 8005e90:	f1bb 0f00 	cmp.w	fp, #0
 8005e94:	dd07      	ble.n	8005ea6 <__kernel_rem_pio2+0x1c6>
 8005e96:	f1bb 0f01 	cmp.w	fp, #1
 8005e9a:	f000 80c1 	beq.w	8006020 <__kernel_rem_pio2+0x340>
 8005e9e:	f1bb 0f02 	cmp.w	fp, #2
 8005ea2:	f000 80c8 	beq.w	8006036 <__kernel_rem_pio2+0x356>
 8005ea6:	f1b9 0f02 	cmp.w	r9, #2
 8005eaa:	d14c      	bne.n	8005f46 <__kernel_rem_pio2+0x266>
 8005eac:	4632      	mov	r2, r6
 8005eae:	463b      	mov	r3, r7
 8005eb0:	4955      	ldr	r1, [pc, #340]	@ (8006008 <__kernel_rem_pio2+0x328>)
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	f7fa f9ac 	bl	8000210 <__aeabi_dsub>
 8005eb8:	4606      	mov	r6, r0
 8005eba:	460f      	mov	r7, r1
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	d042      	beq.n	8005f46 <__kernel_rem_pio2+0x266>
 8005ec0:	4658      	mov	r0, fp
 8005ec2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8005ff8 <__kernel_rem_pio2+0x318>
 8005ec6:	f000 fa5b 	bl	8006380 <scalbn>
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4639      	mov	r1, r7
 8005ece:	ec53 2b10 	vmov	r2, r3, d0
 8005ed2:	f7fa f99d 	bl	8000210 <__aeabi_dsub>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	460f      	mov	r7, r1
 8005eda:	e034      	b.n	8005f46 <__kernel_rem_pio2+0x266>
 8005edc:	4b4b      	ldr	r3, [pc, #300]	@ (800600c <__kernel_rem_pio2+0x32c>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee4:	f7fa fb4c 	bl	8000580 <__aeabi_dmul>
 8005ee8:	f7fa fde4 	bl	8000ab4 <__aeabi_d2iz>
 8005eec:	f7fa fade 	bl	80004ac <__aeabi_i2d>
 8005ef0:	4b47      	ldr	r3, [pc, #284]	@ (8006010 <__kernel_rem_pio2+0x330>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	460f      	mov	r7, r1
 8005ef8:	f7fa fb42 	bl	8000580 <__aeabi_dmul>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f04:	f7fa f984 	bl	8000210 <__aeabi_dsub>
 8005f08:	f7fa fdd4 	bl	8000ab4 <__aeabi_d2iz>
 8005f0c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005f10:	f849 0b04 	str.w	r0, [r9], #4
 8005f14:	4639      	mov	r1, r7
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7fa f97c 	bl	8000214 <__adddf3>
 8005f1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f24:	e75f      	b.n	8005de6 <__kernel_rem_pio2+0x106>
 8005f26:	d107      	bne.n	8005f38 <__kernel_rem_pio2+0x258>
 8005f28:	f108 33ff 	add.w	r3, r8, #4294967295
 8005f2c:	aa0c      	add	r2, sp, #48	@ 0x30
 8005f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f32:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005f36:	e79e      	b.n	8005e76 <__kernel_rem_pio2+0x196>
 8005f38:	4b36      	ldr	r3, [pc, #216]	@ (8006014 <__kernel_rem_pio2+0x334>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f7fa fda6 	bl	8000a8c <__aeabi_dcmpge>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d143      	bne.n	8005fcc <__kernel_rem_pio2+0x2ec>
 8005f44:	4681      	mov	r9, r0
 8005f46:	2200      	movs	r2, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	f7fa fd7f 	bl	8000a50 <__aeabi_dcmpeq>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	f000 80c1 	beq.w	80060da <__kernel_rem_pio2+0x3fa>
 8005f58:	f108 33ff 	add.w	r3, r8, #4294967295
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	9900      	ldr	r1, [sp, #0]
 8005f60:	428b      	cmp	r3, r1
 8005f62:	da70      	bge.n	8006046 <__kernel_rem_pio2+0x366>
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	f000 808b 	beq.w	8006080 <__kernel_rem_pio2+0x3a0>
 8005f6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f6e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005f70:	f1ab 0b18 	sub.w	fp, fp, #24
 8005f74:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f6      	beq.n	8005f6a <__kernel_rem_pio2+0x28a>
 8005f7c:	4658      	mov	r0, fp
 8005f7e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005ff8 <__kernel_rem_pio2+0x318>
 8005f82:	f000 f9fd 	bl	8006380 <scalbn>
 8005f86:	f108 0301 	add.w	r3, r8, #1
 8005f8a:	00da      	lsls	r2, r3, #3
 8005f8c:	9205      	str	r2, [sp, #20]
 8005f8e:	ec55 4b10 	vmov	r4, r5, d0
 8005f92:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005f94:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800600c <__kernel_rem_pio2+0x32c>
 8005f98:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005f9c:	4646      	mov	r6, r8
 8005f9e:	f04f 0a00 	mov.w	sl, #0
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	f280 80d1 	bge.w	800614a <__kernel_rem_pio2+0x46a>
 8005fa8:	4644      	mov	r4, r8
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	f2c0 80ff 	blt.w	80061ae <__kernel_rem_pio2+0x4ce>
 8005fb0:	4b19      	ldr	r3, [pc, #100]	@ (8006018 <__kernel_rem_pio2+0x338>)
 8005fb2:	461f      	mov	r7, r3
 8005fb4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005fb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	f04f 0a00 	mov.w	sl, #0
 8005fc0:	f04f 0b00 	mov.w	fp, #0
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	eba8 0504 	sub.w	r5, r8, r4
 8005fca:	e0e4      	b.n	8006196 <__kernel_rem_pio2+0x4b6>
 8005fcc:	f04f 0902 	mov.w	r9, #2
 8005fd0:	e754      	b.n	8005e7c <__kernel_rem_pio2+0x19c>
 8005fd2:	f854 3b04 	ldr.w	r3, [r4], #4
 8005fd6:	bb0d      	cbnz	r5, 800601c <__kernel_rem_pio2+0x33c>
 8005fd8:	b123      	cbz	r3, 8005fe4 <__kernel_rem_pio2+0x304>
 8005fda:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005fde:	f844 3c04 	str.w	r3, [r4, #-4]
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	3201      	adds	r2, #1
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	e74f      	b.n	8005e8a <__kernel_rem_pio2+0x1aa>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
	...
 8005ffc:	3ff00000 	.word	0x3ff00000
 8006000:	08006770 	.word	0x08006770
 8006004:	40200000 	.word	0x40200000
 8006008:	3ff00000 	.word	0x3ff00000
 800600c:	3e700000 	.word	0x3e700000
 8006010:	41700000 	.word	0x41700000
 8006014:	3fe00000 	.word	0x3fe00000
 8006018:	08006730 	.word	0x08006730
 800601c:	1acb      	subs	r3, r1, r3
 800601e:	e7de      	b.n	8005fde <__kernel_rem_pio2+0x2fe>
 8006020:	f108 32ff 	add.w	r2, r8, #4294967295
 8006024:	ab0c      	add	r3, sp, #48	@ 0x30
 8006026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800602e:	a90c      	add	r1, sp, #48	@ 0x30
 8006030:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006034:	e737      	b.n	8005ea6 <__kernel_rem_pio2+0x1c6>
 8006036:	f108 32ff 	add.w	r2, r8, #4294967295
 800603a:	ab0c      	add	r3, sp, #48	@ 0x30
 800603c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006040:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006044:	e7f3      	b.n	800602e <__kernel_rem_pio2+0x34e>
 8006046:	a90c      	add	r1, sp, #48	@ 0x30
 8006048:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800604c:	3b01      	subs	r3, #1
 800604e:	430a      	orrs	r2, r1
 8006050:	e785      	b.n	8005f5e <__kernel_rem_pio2+0x27e>
 8006052:	3401      	adds	r4, #1
 8006054:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006058:	2a00      	cmp	r2, #0
 800605a:	d0fa      	beq.n	8006052 <__kernel_rem_pio2+0x372>
 800605c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800605e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006062:	eb0d 0503 	add.w	r5, sp, r3
 8006066:	9b06      	ldr	r3, [sp, #24]
 8006068:	aa20      	add	r2, sp, #128	@ 0x80
 800606a:	4443      	add	r3, r8
 800606c:	f108 0701 	add.w	r7, r8, #1
 8006070:	3d98      	subs	r5, #152	@ 0x98
 8006072:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006076:	4444      	add	r4, r8
 8006078:	42bc      	cmp	r4, r7
 800607a:	da04      	bge.n	8006086 <__kernel_rem_pio2+0x3a6>
 800607c:	46a0      	mov	r8, r4
 800607e:	e6a2      	b.n	8005dc6 <__kernel_rem_pio2+0xe6>
 8006080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006082:	2401      	movs	r4, #1
 8006084:	e7e6      	b.n	8006054 <__kernel_rem_pio2+0x374>
 8006086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006088:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800608c:	f7fa fa0e 	bl	80004ac <__aeabi_i2d>
 8006090:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8006350 <__kernel_rem_pio2+0x670>
 8006094:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006098:	ed8d 7b02 	vstr	d7, [sp, #8]
 800609c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060a0:	46b2      	mov	sl, r6
 80060a2:	f04f 0800 	mov.w	r8, #0
 80060a6:	9b05      	ldr	r3, [sp, #20]
 80060a8:	4598      	cmp	r8, r3
 80060aa:	dd05      	ble.n	80060b8 <__kernel_rem_pio2+0x3d8>
 80060ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060b0:	3701      	adds	r7, #1
 80060b2:	eca5 7b02 	vstmia	r5!, {d7}
 80060b6:	e7df      	b.n	8006078 <__kernel_rem_pio2+0x398>
 80060b8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80060bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80060c0:	f7fa fa5e 	bl	8000580 <__aeabi_dmul>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060cc:	f7fa f8a2 	bl	8000214 <__adddf3>
 80060d0:	f108 0801 	add.w	r8, r8, #1
 80060d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d8:	e7e5      	b.n	80060a6 <__kernel_rem_pio2+0x3c6>
 80060da:	f1cb 0000 	rsb	r0, fp, #0
 80060de:	ec47 6b10 	vmov	d0, r6, r7
 80060e2:	f000 f94d 	bl	8006380 <scalbn>
 80060e6:	ec55 4b10 	vmov	r4, r5, d0
 80060ea:	4b9b      	ldr	r3, [pc, #620]	@ (8006358 <__kernel_rem_pio2+0x678>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7fa fccb 	bl	8000a8c <__aeabi_dcmpge>
 80060f6:	b300      	cbz	r0, 800613a <__kernel_rem_pio2+0x45a>
 80060f8:	4b98      	ldr	r3, [pc, #608]	@ (800635c <__kernel_rem_pio2+0x67c>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	4620      	mov	r0, r4
 80060fe:	4629      	mov	r1, r5
 8006100:	f7fa fa3e 	bl	8000580 <__aeabi_dmul>
 8006104:	f7fa fcd6 	bl	8000ab4 <__aeabi_d2iz>
 8006108:	4606      	mov	r6, r0
 800610a:	f7fa f9cf 	bl	80004ac <__aeabi_i2d>
 800610e:	4b92      	ldr	r3, [pc, #584]	@ (8006358 <__kernel_rem_pio2+0x678>)
 8006110:	2200      	movs	r2, #0
 8006112:	f7fa fa35 	bl	8000580 <__aeabi_dmul>
 8006116:	460b      	mov	r3, r1
 8006118:	4602      	mov	r2, r0
 800611a:	4629      	mov	r1, r5
 800611c:	4620      	mov	r0, r4
 800611e:	f7fa f877 	bl	8000210 <__aeabi_dsub>
 8006122:	f7fa fcc7 	bl	8000ab4 <__aeabi_d2iz>
 8006126:	ab0c      	add	r3, sp, #48	@ 0x30
 8006128:	f10b 0b18 	add.w	fp, fp, #24
 800612c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006130:	f108 0801 	add.w	r8, r8, #1
 8006134:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006138:	e720      	b.n	8005f7c <__kernel_rem_pio2+0x29c>
 800613a:	4620      	mov	r0, r4
 800613c:	4629      	mov	r1, r5
 800613e:	f7fa fcb9 	bl	8000ab4 <__aeabi_d2iz>
 8006142:	ab0c      	add	r3, sp, #48	@ 0x30
 8006144:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006148:	e718      	b.n	8005f7c <__kernel_rem_pio2+0x29c>
 800614a:	ab0c      	add	r3, sp, #48	@ 0x30
 800614c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006150:	f7fa f9ac 	bl	80004ac <__aeabi_i2d>
 8006154:	4622      	mov	r2, r4
 8006156:	462b      	mov	r3, r5
 8006158:	f7fa fa12 	bl	8000580 <__aeabi_dmul>
 800615c:	4652      	mov	r2, sl
 800615e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006162:	465b      	mov	r3, fp
 8006164:	4620      	mov	r0, r4
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa fa0a 	bl	8000580 <__aeabi_dmul>
 800616c:	3e01      	subs	r6, #1
 800616e:	4604      	mov	r4, r0
 8006170:	460d      	mov	r5, r1
 8006172:	e716      	b.n	8005fa2 <__kernel_rem_pio2+0x2c2>
 8006174:	9906      	ldr	r1, [sp, #24]
 8006176:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800617a:	9106      	str	r1, [sp, #24]
 800617c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006180:	f7fa f9fe 	bl	8000580 <__aeabi_dmul>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4650      	mov	r0, sl
 800618a:	4659      	mov	r1, fp
 800618c:	f7fa f842 	bl	8000214 <__adddf3>
 8006190:	3601      	adds	r6, #1
 8006192:	4682      	mov	sl, r0
 8006194:	468b      	mov	fp, r1
 8006196:	9b00      	ldr	r3, [sp, #0]
 8006198:	429e      	cmp	r6, r3
 800619a:	dc01      	bgt.n	80061a0 <__kernel_rem_pio2+0x4c0>
 800619c:	42ae      	cmp	r6, r5
 800619e:	dde9      	ble.n	8006174 <__kernel_rem_pio2+0x494>
 80061a0:	ab48      	add	r3, sp, #288	@ 0x120
 80061a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80061a6:	e9c5 ab00 	strd	sl, fp, [r5]
 80061aa:	3c01      	subs	r4, #1
 80061ac:	e6fd      	b.n	8005faa <__kernel_rem_pio2+0x2ca>
 80061ae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	dc0b      	bgt.n	80061cc <__kernel_rem_pio2+0x4ec>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dc35      	bgt.n	8006224 <__kernel_rem_pio2+0x544>
 80061b8:	d059      	beq.n	800626e <__kernel_rem_pio2+0x58e>
 80061ba:	9b02      	ldr	r3, [sp, #8]
 80061bc:	f003 0007 	and.w	r0, r3, #7
 80061c0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80061c4:	ecbd 8b02 	vpop	{d8}
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d1f3      	bne.n	80061ba <__kernel_rem_pio2+0x4da>
 80061d2:	9b05      	ldr	r3, [sp, #20]
 80061d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061d8:	eb0d 0403 	add.w	r4, sp, r3
 80061dc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80061e0:	4625      	mov	r5, r4
 80061e2:	46c2      	mov	sl, r8
 80061e4:	f1ba 0f00 	cmp.w	sl, #0
 80061e8:	dc69      	bgt.n	80062be <__kernel_rem_pio2+0x5de>
 80061ea:	4645      	mov	r5, r8
 80061ec:	2d01      	cmp	r5, #1
 80061ee:	f300 8087 	bgt.w	8006300 <__kernel_rem_pio2+0x620>
 80061f2:	9c05      	ldr	r4, [sp, #20]
 80061f4:	ab48      	add	r3, sp, #288	@ 0x120
 80061f6:	441c      	add	r4, r3
 80061f8:	2000      	movs	r0, #0
 80061fa:	2100      	movs	r1, #0
 80061fc:	f1b8 0f01 	cmp.w	r8, #1
 8006200:	f300 809c 	bgt.w	800633c <__kernel_rem_pio2+0x65c>
 8006204:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8006208:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800620c:	f1b9 0f00 	cmp.w	r9, #0
 8006210:	f040 80a6 	bne.w	8006360 <__kernel_rem_pio2+0x680>
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	e9c3 5600 	strd	r5, r6, [r3]
 800621a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800621e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006222:	e7ca      	b.n	80061ba <__kernel_rem_pio2+0x4da>
 8006224:	9d05      	ldr	r5, [sp, #20]
 8006226:	ab48      	add	r3, sp, #288	@ 0x120
 8006228:	441d      	add	r5, r3
 800622a:	4644      	mov	r4, r8
 800622c:	2000      	movs	r0, #0
 800622e:	2100      	movs	r1, #0
 8006230:	2c00      	cmp	r4, #0
 8006232:	da35      	bge.n	80062a0 <__kernel_rem_pio2+0x5c0>
 8006234:	f1b9 0f00 	cmp.w	r9, #0
 8006238:	d038      	beq.n	80062ac <__kernel_rem_pio2+0x5cc>
 800623a:	4602      	mov	r2, r0
 800623c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006240:	9c04      	ldr	r4, [sp, #16]
 8006242:	e9c4 2300 	strd	r2, r3, [r4]
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800624e:	f7f9 ffdf 	bl	8000210 <__aeabi_dsub>
 8006252:	ad4a      	add	r5, sp, #296	@ 0x128
 8006254:	2401      	movs	r4, #1
 8006256:	45a0      	cmp	r8, r4
 8006258:	da2b      	bge.n	80062b2 <__kernel_rem_pio2+0x5d2>
 800625a:	f1b9 0f00 	cmp.w	r9, #0
 800625e:	d002      	beq.n	8006266 <__kernel_rem_pio2+0x586>
 8006260:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006264:	4619      	mov	r1, r3
 8006266:	9b04      	ldr	r3, [sp, #16]
 8006268:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800626c:	e7a5      	b.n	80061ba <__kernel_rem_pio2+0x4da>
 800626e:	9c05      	ldr	r4, [sp, #20]
 8006270:	ab48      	add	r3, sp, #288	@ 0x120
 8006272:	441c      	add	r4, r3
 8006274:	2000      	movs	r0, #0
 8006276:	2100      	movs	r1, #0
 8006278:	f1b8 0f00 	cmp.w	r8, #0
 800627c:	da09      	bge.n	8006292 <__kernel_rem_pio2+0x5b2>
 800627e:	f1b9 0f00 	cmp.w	r9, #0
 8006282:	d002      	beq.n	800628a <__kernel_rem_pio2+0x5aa>
 8006284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006288:	4619      	mov	r1, r3
 800628a:	9b04      	ldr	r3, [sp, #16]
 800628c:	e9c3 0100 	strd	r0, r1, [r3]
 8006290:	e793      	b.n	80061ba <__kernel_rem_pio2+0x4da>
 8006292:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006296:	f7f9 ffbd 	bl	8000214 <__adddf3>
 800629a:	f108 38ff 	add.w	r8, r8, #4294967295
 800629e:	e7eb      	b.n	8006278 <__kernel_rem_pio2+0x598>
 80062a0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80062a4:	f7f9 ffb6 	bl	8000214 <__adddf3>
 80062a8:	3c01      	subs	r4, #1
 80062aa:	e7c1      	b.n	8006230 <__kernel_rem_pio2+0x550>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	e7c6      	b.n	8006240 <__kernel_rem_pio2+0x560>
 80062b2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80062b6:	f7f9 ffad 	bl	8000214 <__adddf3>
 80062ba:	3401      	adds	r4, #1
 80062bc:	e7cb      	b.n	8006256 <__kernel_rem_pio2+0x576>
 80062be:	ed35 7b02 	vldmdb	r5!, {d7}
 80062c2:	ed8d 7b00 	vstr	d7, [sp]
 80062c6:	ed95 7b02 	vldr	d7, [r5, #8]
 80062ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ce:	ec53 2b17 	vmov	r2, r3, d7
 80062d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80062d6:	f7f9 ff9d 	bl	8000214 <__adddf3>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4606      	mov	r6, r0
 80062e0:	460f      	mov	r7, r1
 80062e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062e6:	f7f9 ff93 	bl	8000210 <__aeabi_dsub>
 80062ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062ee:	f7f9 ff91 	bl	8000214 <__adddf3>
 80062f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062f6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80062fa:	e9c5 6700 	strd	r6, r7, [r5]
 80062fe:	e771      	b.n	80061e4 <__kernel_rem_pio2+0x504>
 8006300:	ed34 7b02 	vldmdb	r4!, {d7}
 8006304:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006308:	ec51 0b17 	vmov	r0, r1, d7
 800630c:	4652      	mov	r2, sl
 800630e:	465b      	mov	r3, fp
 8006310:	ed8d 7b00 	vstr	d7, [sp]
 8006314:	f7f9 ff7e 	bl	8000214 <__adddf3>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4606      	mov	r6, r0
 800631e:	460f      	mov	r7, r1
 8006320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006324:	f7f9 ff74 	bl	8000210 <__aeabi_dsub>
 8006328:	4652      	mov	r2, sl
 800632a:	465b      	mov	r3, fp
 800632c:	f7f9 ff72 	bl	8000214 <__adddf3>
 8006330:	3d01      	subs	r5, #1
 8006332:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006336:	e9c4 6700 	strd	r6, r7, [r4]
 800633a:	e757      	b.n	80061ec <__kernel_rem_pio2+0x50c>
 800633c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006340:	f7f9 ff68 	bl	8000214 <__adddf3>
 8006344:	f108 38ff 	add.w	r8, r8, #4294967295
 8006348:	e758      	b.n	80061fc <__kernel_rem_pio2+0x51c>
 800634a:	bf00      	nop
 800634c:	f3af 8000 	nop.w
	...
 8006358:	41700000 	.word	0x41700000
 800635c:	3e700000 	.word	0x3e700000
 8006360:	9b04      	ldr	r3, [sp, #16]
 8006362:	9a04      	ldr	r2, [sp, #16]
 8006364:	601d      	str	r5, [r3, #0]
 8006366:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800636a:	605c      	str	r4, [r3, #4]
 800636c:	609f      	str	r7, [r3, #8]
 800636e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8006372:	60d3      	str	r3, [r2, #12]
 8006374:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006378:	6110      	str	r0, [r2, #16]
 800637a:	6153      	str	r3, [r2, #20]
 800637c:	e71d      	b.n	80061ba <__kernel_rem_pio2+0x4da>
 800637e:	bf00      	nop

08006380 <scalbn>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	ec55 4b10 	vmov	r4, r5, d0
 8006386:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800638a:	4606      	mov	r6, r0
 800638c:	462b      	mov	r3, r5
 800638e:	b991      	cbnz	r1, 80063b6 <scalbn+0x36>
 8006390:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006394:	4323      	orrs	r3, r4
 8006396:	d03b      	beq.n	8006410 <scalbn+0x90>
 8006398:	4b33      	ldr	r3, [pc, #204]	@ (8006468 <scalbn+0xe8>)
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	2200      	movs	r2, #0
 80063a0:	f7fa f8ee 	bl	8000580 <__aeabi_dmul>
 80063a4:	4b31      	ldr	r3, [pc, #196]	@ (800646c <scalbn+0xec>)
 80063a6:	429e      	cmp	r6, r3
 80063a8:	4604      	mov	r4, r0
 80063aa:	460d      	mov	r5, r1
 80063ac:	da0f      	bge.n	80063ce <scalbn+0x4e>
 80063ae:	a326      	add	r3, pc, #152	@ (adr r3, 8006448 <scalbn+0xc8>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	e01e      	b.n	80063f4 <scalbn+0x74>
 80063b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80063ba:	4291      	cmp	r1, r2
 80063bc:	d10b      	bne.n	80063d6 <scalbn+0x56>
 80063be:	4622      	mov	r2, r4
 80063c0:	4620      	mov	r0, r4
 80063c2:	4629      	mov	r1, r5
 80063c4:	f7f9 ff26 	bl	8000214 <__adddf3>
 80063c8:	4604      	mov	r4, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	e020      	b.n	8006410 <scalbn+0x90>
 80063ce:	460b      	mov	r3, r1
 80063d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80063d4:	3936      	subs	r1, #54	@ 0x36
 80063d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80063da:	4296      	cmp	r6, r2
 80063dc:	dd0d      	ble.n	80063fa <scalbn+0x7a>
 80063de:	2d00      	cmp	r5, #0
 80063e0:	a11b      	add	r1, pc, #108	@ (adr r1, 8006450 <scalbn+0xd0>)
 80063e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063e6:	da02      	bge.n	80063ee <scalbn+0x6e>
 80063e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8006458 <scalbn+0xd8>)
 80063ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063ee:	a318      	add	r3, pc, #96	@ (adr r3, 8006450 <scalbn+0xd0>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f7fa f8c4 	bl	8000580 <__aeabi_dmul>
 80063f8:	e7e6      	b.n	80063c8 <scalbn+0x48>
 80063fa:	1872      	adds	r2, r6, r1
 80063fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006400:	428a      	cmp	r2, r1
 8006402:	dcec      	bgt.n	80063de <scalbn+0x5e>
 8006404:	2a00      	cmp	r2, #0
 8006406:	dd06      	ble.n	8006416 <scalbn+0x96>
 8006408:	f36f 531e 	bfc	r3, #20, #11
 800640c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006410:	ec45 4b10 	vmov	d0, r4, r5
 8006414:	bd70      	pop	{r4, r5, r6, pc}
 8006416:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800641a:	da08      	bge.n	800642e <scalbn+0xae>
 800641c:	2d00      	cmp	r5, #0
 800641e:	a10a      	add	r1, pc, #40	@ (adr r1, 8006448 <scalbn+0xc8>)
 8006420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006424:	dac3      	bge.n	80063ae <scalbn+0x2e>
 8006426:	a10e      	add	r1, pc, #56	@ (adr r1, 8006460 <scalbn+0xe0>)
 8006428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800642c:	e7bf      	b.n	80063ae <scalbn+0x2e>
 800642e:	3236      	adds	r2, #54	@ 0x36
 8006430:	f36f 531e 	bfc	r3, #20, #11
 8006434:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006438:	4620      	mov	r0, r4
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <scalbn+0xf0>)
 800643c:	4629      	mov	r1, r5
 800643e:	2200      	movs	r2, #0
 8006440:	e7d8      	b.n	80063f4 <scalbn+0x74>
 8006442:	bf00      	nop
 8006444:	f3af 8000 	nop.w
 8006448:	c2f8f359 	.word	0xc2f8f359
 800644c:	01a56e1f 	.word	0x01a56e1f
 8006450:	8800759c 	.word	0x8800759c
 8006454:	7e37e43c 	.word	0x7e37e43c
 8006458:	8800759c 	.word	0x8800759c
 800645c:	fe37e43c 	.word	0xfe37e43c
 8006460:	c2f8f359 	.word	0xc2f8f359
 8006464:	81a56e1f 	.word	0x81a56e1f
 8006468:	43500000 	.word	0x43500000
 800646c:	ffff3cb0 	.word	0xffff3cb0
 8006470:	3c900000 	.word	0x3c900000
 8006474:	00000000 	.word	0x00000000

08006478 <floor>:
 8006478:	ec51 0b10 	vmov	r0, r1, d0
 800647c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006484:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006488:	2e13      	cmp	r6, #19
 800648a:	460c      	mov	r4, r1
 800648c:	4605      	mov	r5, r0
 800648e:	4680      	mov	r8, r0
 8006490:	dc34      	bgt.n	80064fc <floor+0x84>
 8006492:	2e00      	cmp	r6, #0
 8006494:	da17      	bge.n	80064c6 <floor+0x4e>
 8006496:	a332      	add	r3, pc, #200	@ (adr r3, 8006560 <floor+0xe8>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f7f9 feba 	bl	8000214 <__adddf3>
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	f7fa fafc 	bl	8000aa0 <__aeabi_dcmpgt>
 80064a8:	b150      	cbz	r0, 80064c0 <floor+0x48>
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	da55      	bge.n	800655a <floor+0xe2>
 80064ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80064b2:	432c      	orrs	r4, r5
 80064b4:	2500      	movs	r5, #0
 80064b6:	42ac      	cmp	r4, r5
 80064b8:	4c2b      	ldr	r4, [pc, #172]	@ (8006568 <floor+0xf0>)
 80064ba:	bf08      	it	eq
 80064bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	e023      	b.n	800650e <floor+0x96>
 80064c6:	4f29      	ldr	r7, [pc, #164]	@ (800656c <floor+0xf4>)
 80064c8:	4137      	asrs	r7, r6
 80064ca:	ea01 0307 	and.w	r3, r1, r7
 80064ce:	4303      	orrs	r3, r0
 80064d0:	d01d      	beq.n	800650e <floor+0x96>
 80064d2:	a323      	add	r3, pc, #140	@ (adr r3, 8006560 <floor+0xe8>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7f9 fe9c 	bl	8000214 <__adddf3>
 80064dc:	2200      	movs	r2, #0
 80064de:	2300      	movs	r3, #0
 80064e0:	f7fa fade 	bl	8000aa0 <__aeabi_dcmpgt>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d0eb      	beq.n	80064c0 <floor+0x48>
 80064e8:	2c00      	cmp	r4, #0
 80064ea:	bfbe      	ittt	lt
 80064ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80064f0:	4133      	asrlt	r3, r6
 80064f2:	18e4      	addlt	r4, r4, r3
 80064f4:	ea24 0407 	bic.w	r4, r4, r7
 80064f8:	2500      	movs	r5, #0
 80064fa:	e7e1      	b.n	80064c0 <floor+0x48>
 80064fc:	2e33      	cmp	r6, #51	@ 0x33
 80064fe:	dd0a      	ble.n	8006516 <floor+0x9e>
 8006500:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006504:	d103      	bne.n	800650e <floor+0x96>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	f7f9 fe83 	bl	8000214 <__adddf3>
 800650e:	ec41 0b10 	vmov	d0, r0, r1
 8006512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006516:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800651a:	f04f 37ff 	mov.w	r7, #4294967295
 800651e:	40df      	lsrs	r7, r3
 8006520:	4207      	tst	r7, r0
 8006522:	d0f4      	beq.n	800650e <floor+0x96>
 8006524:	a30e      	add	r3, pc, #56	@ (adr r3, 8006560 <floor+0xe8>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7f9 fe73 	bl	8000214 <__adddf3>
 800652e:	2200      	movs	r2, #0
 8006530:	2300      	movs	r3, #0
 8006532:	f7fa fab5 	bl	8000aa0 <__aeabi_dcmpgt>
 8006536:	2800      	cmp	r0, #0
 8006538:	d0c2      	beq.n	80064c0 <floor+0x48>
 800653a:	2c00      	cmp	r4, #0
 800653c:	da0a      	bge.n	8006554 <floor+0xdc>
 800653e:	2e14      	cmp	r6, #20
 8006540:	d101      	bne.n	8006546 <floor+0xce>
 8006542:	3401      	adds	r4, #1
 8006544:	e006      	b.n	8006554 <floor+0xdc>
 8006546:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800654a:	2301      	movs	r3, #1
 800654c:	40b3      	lsls	r3, r6
 800654e:	441d      	add	r5, r3
 8006550:	4545      	cmp	r5, r8
 8006552:	d3f6      	bcc.n	8006542 <floor+0xca>
 8006554:	ea25 0507 	bic.w	r5, r5, r7
 8006558:	e7b2      	b.n	80064c0 <floor+0x48>
 800655a:	2500      	movs	r5, #0
 800655c:	462c      	mov	r4, r5
 800655e:	e7af      	b.n	80064c0 <floor+0x48>
 8006560:	8800759c 	.word	0x8800759c
 8006564:	7e37e43c 	.word	0x7e37e43c
 8006568:	bff00000 	.word	0xbff00000
 800656c:	000fffff 	.word	0x000fffff

08006570 <_init>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr

0800657c <_fini>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr
